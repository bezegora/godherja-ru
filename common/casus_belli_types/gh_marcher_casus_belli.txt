marcher_crown_reclamation_cb = {
	group = invasion

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		primary_title = title:e_chevalie
		has_character_modifier = piece_of_the_broken_crown_modifier
	}

	allowed_against_character = {
		has_character_modifier = piece_of_the_broken_crown_modifier
	}

	target_titles = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	
	on_invalidated_desc = msg_marcher_reunification_invalidated_message

	cost = {
		prestige = {
			value = 250
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = marcher_crown_reclamation_victory_desc_attacker
			}
			desc = marcher_crown_reclamation_victory_desc
		}
	}

	on_victory = {
		hidden_effect = {
			scope:defender = {
				if = {
					limit = {
						has_artifact = { ARTIFACT = artifact_38 }
					}
					transfer_artifact = { A = scope:defender B = scope:attacker ARTIFACT = artifact_38 }
				}
				else_if = {
					limit = {
						has_artifact = { ARTIFACT = artifact_39 }
					}
					transfer_artifact = { A = scope:defender B = scope:attacker ARTIFACT = artifact_39 }
				}
				else_if = {
					limit = {
						has_artifact = { ARTIFACT = artifact_40 }
					}
					transfer_artifact = { A = scope:defender B = scope:attacker ARTIFACT = artifact_40 }
				}
				else_if = {
					limit = {
						has_artifact = { ARTIFACT = artifact_brokencrown1 }
					}
					transfer_artifact = { A = scope:defender B = scope:attacker ARTIFACT = artifact_brokencrown1 }
				}
				remove_character_modifier = piece_of_the_broken_crown_modifier
			}
		}
		
		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = minor_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = marcher_crown_reclamation_white_peace_desc_defender
			}
			desc = marcher_crown_reclamation_white_peace_desc
		}
	}

	on_white_peace = {
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = miniscule_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = marcher_crown_reclamation_white_peace_desc_defender
			}
			desc = marcher_crown_reclamation_white_peace_desc
		}
	}

	on_defeat = {
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 2
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for defenders
		every_in_list = {
			list = defenders
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = miniscule_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = massive_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = invalidate
	on_primary_defender_death = inherit
	transfer_behavior = transfer

	war_name = "INVASION_WAR_NAME"
	war_name_base = "INVASION_WAR_NAME_BASE"
	cb_name = "MARCHER_CROWN_RECLAMATION_CB_NAME"

	interface_priority = 500
	
}

marcher_reunification_cb = {
	group = invasion

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		has_character_modifier = piece_of_the_broken_crown_modifier
		title:e_chevalie = { is_title_created = no }
	}

	allowed_against_character = {
		character_is_realm_neighbor = scope:attacker
		any_realm_county = {
			empire = title:e_chevalie
		}
	}
	
	valid_to_start = {
		scope:target = title:e_chevalie
	}

	target_titles = all
	target_title_tier = empire
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	
	on_invalidated_desc = msg_marcher_reunification_invalidated_message

	cost = {
		prestige = {
			value = 250
		}
	}

	on_declaration = {
		on_declared_war = yes
		every_ruler = {
			limit = {
				AND = {
					primary_title.empire = title:e_chevalie
					NOR = {
						this = scope:attacker
						this = scope:defender
					}
				}
			}
			trigger_event = {
				id = war_event.4002
				days = 1
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = marcher_reunification_victory_desc_attacker
			}
			desc = marcher_reunification_war_victory_desc
		}
	}

	on_victory = {
		every_ruler = {
			limit = {
				AND = {
					primary_title.empire = title:e_chevalie
					NOR = {
						this = scope:attacker
						this = scope:defender
					}
				}
			}
			trigger_event = {
				id = war_event.4003
				days = 1
			}
		}

		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# Take the defender's primary title and all titles of the same tier
		every_in_list = {
			list = target_titles
			every_in_de_jure_hierarchy = {
				limit = {
					AND = {
						tier = scope:defender.primary_title.tier
						holder = scope:defender
					}
				}
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
				}
			}
		}

		# Make the defender a vassal of the attacker
		scope:defender = {
			change_liege = {
				LIEGE = scope:attacker
				CHANGE = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change
		
		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = minor_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = marcher_reunification_white_peace_desc_defender
			}
			desc = marcher_reunification_white_peace_desc
		}
	}

	on_white_peace = {
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = miniscule_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = marcher_reunification_defeat_desc_defender
			}
			desc = marcher_reunification_defeat_desc
		}
	}

	on_defeat = {
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 2
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for defenders
		every_in_list = {
			list = defenders
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = miniscule_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = massive_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = invalidate
	on_primary_defender_death = inherit
	transfer_behavior = transfer

	war_name = "INVASION_WAR_NAME"
	war_name_base = "INVASION_WAR_NAME_BASE"
	cb_name = "MARCHER_REUNIFICATION_CB_NAME"

	interface_priority = 500
	
}

marcher_vassalization_cb = {
	group = vassalization
	ai_only_against_neighbors = yes
	
	allowed_for_character = {
		has_title = title:e_chevalie
	}

	# Root is the title
	# scope:attacker is the attacker
	# scope:defender is the defender
	
	allowed_against_character = {
		scope:defender = {
			is_independent_ruler = yes
			character_is_realm_neighbor = scope:attacker
			has_character_flag = refused_to_voluntarily_submit
		}
		scope:attacker.primary_title.tier > scope:defender.primary_title.tier
	}
	
	cost = {
		prestige = 100
	}
	
	should_invalidate = {
		OR = {
			scope:defender = {
				is_independent_ruler = no
			}
			scope:defender.primary_title.tier >= scope:attacker.primary_title.tier
		}
	}
	
	on_declaration = {
		on_declared_war = yes
	}	
	
	on_invalidated_desc = msg_vassalization_war_invalidated_message
	
	on_invalidated = {}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = vassalization_cb_victory_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = vassalization_cb_victory_desc_defender
			}
			desc = vassalization_cb_victory_desc
		}
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:defender = {
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
		
		
		# Prestige level progress for the attacker
		scope:attacker = {
			add_prestige_experience = {
				value = medium_prestige_value
			}
		}

		# Prestige loss for the defender
		scope:defender = {
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = {
				value = major_prestige_value
			}
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		# Truce
		add_truce_attacker_victory_effect = yes
		
		scope:attacker = {
			trigger_event = marcher_decision.0550
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = vassalization_cb_white_peace_desc_defender
			}
			desc = vassalization_cb_white_peace_desc
		}
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = vassalization_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = vassalization_cb_defeat_desc_attacker
			}
			desc = vassalization_cb_white_peace_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the defender
		scope:defender = {
			add_prestige = {
				value = medium_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}

		# Truce
		add_truce_attacker_defeat_effect = yes
		
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "VASSALIZATION_WAR_NAME"
	war_name_base = "VASSALIZATION_WAR_NAME_BASE"
	cb_name = "VASSALIZATION_CB_NAME"
	interface_priority = 59
	
	ticking_war_score_targets_entire_realm = yes
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.8
	
	max_ai_diplo_distance_to_title = 500
	
}