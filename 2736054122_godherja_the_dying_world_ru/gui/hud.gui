######################################################
#################### META INFO #######################
######################################################

widget = {
	size = { 100% 100% }
	name = "meta_info"
	visible = "[IsDefaultGUIMode]"
	layer = bottom

	using = Animation_ShowHide_Standard

	flowcontainer = {
		name = "observer_status"
		visible = "[IsObserver]"
		parentanchor = bottom|left
		position = { 240 -50 }
		ignoreinvisible = yes

		background = {
			using = Background_Area_Dark
		}

		text_single = {
			name = "global_observer_indication"
			visible = "[Not(GetPlayer.IsValid)]"
			text = "GLOBAL_OBSERVER"
		}

		text_single = {
			name = "player_observer_indication"
			visible = "[GetPlayer.IsValid]"
			text = "PLAYER_OBSERVER"
		}

		button_cancel = {
			name = "cancel_button"
			visible = "[GetPlayer.IsValid]"

			size = { 30 30 }
			onclick = "[ClearObserver]"
			tooltip = "OBSERVER_MODE_ON"
		}

		icon_observer = {
			size = { 30 30 }
			visible = "[Not(GetPlayer.IsValid)]"
		}
	}

	## Build version
	text_single = {
		name = "build_version_text"
		position = { 5 5 }
		visible = "[Not(ReleaseMode)]"

		tooltip = "[GetBuildVersionDescription]"

		text = "VERSION_SHORT"
		default_format = "#low"
		max_width = 300
	}

	error_horse = {
		parentanchor = bottom|left
		position = { 610 -10 }
		visible = "[And( Not( IsPauseMenuShown ), Not(ReleaseMode) )]"
	}
}

widget = {
	name = "ingame_topbar"
	visible = "[InGameTopbar.ShouldBeVisible]"
	size = { 100% 100% }
	layer = middle

	### Alerts
	notifications_alerts = {
		visible = "[Not( IsPauseMenuShown )]"
		parentanchor = top|right
		position = { -900 0 }
		spacing = 10

		using = Animation_ShowHide_Quick
	}

	######################################################
	#################### TOP RIGHT #######################
	######################################################

	### Top Right Bar
	widget = {
		visible = "[Not( IsPauseMenuShown )]"
		name = "top_bar"
		size = { 720 38 }
		parentanchor = top|right
		filter_mouse = all
		alwaystransparent = no
		layer = top

		using = Animation_ShowHide_Quick

		background = {
			texture = "gfx/interface/skinned/hud_top_right_bg.dds"
			margin_left = 10
			margin_bottom = 28
		}

		icon = {
			parentanchor = bottom|right
			position = { 7 23 }
			texture = "gfx/interface/component_decoration/decoration_arch.dds"
			size = { 30 30 }
			mirror = vertical
		}
		
		## Resources
		hbox = {
			name = "resources"
			margin_left = 20

			hbox = {
				name = "spendables"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				hbox = {
					name = "tutorial_highlight_resources_bar"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_right = 5
					margin_left = 20

					hbox = {
						name = "magic"
						minimumsize = { 90 0 }
						margin_left = 7
						margin_right = 5
						margin_top = -5
						spacing = 6
						
						using = tooltip_ne
					
						icon = {
							name = "magic_icon"
							size = { 30 30 }
							texture = "gfx/interface/icons/currencies/icon_magic_00.dds"
						}
					
						flowcontainer = {
							margin_bottom = 7
							spacing = -6
							direction = vertical
					
							text_single = {
								name = "magic_value"
								text = "[FixedPointToFloat(GetPlayer.MakeScope.Var('magic_counter').GetValue)|1]"
					
								max_width = 50
								default_format = "#high"
								using = Font_Size_Medium
							}
							
							text_single = {
								name = "magic_income"
								text = "#F +[FixedPointToFloat(GetPlayer.MakeScope.Var('monthly_magic').GetValue)|1]#!"
					
								max_width = 50
								default_format = "#high"
								using = Font_Size_Small
							}
						}
						
						tooltipwidget = {
							widget_magic_value_tooltip = {}
						}
					}
					
					divider_light = {
						layoutpolicy_vertical = expanding
						alpha = 0.8
					}
					
					hbox = {
						name = "gold"
						layoutpolicy_vertical = expanding
						minimumsize = { 90 0 }
						margin_left = 7
						margin_right = 5

						using = tooltip_ne

						tooltipwidget = {
							widget_gold_breakdown_tooltip = {
								blockoverride "income"
								{
									datacontext = "[InGameTopbar.GetIncomeBalanceBreakdown]"
								}

								blockoverride "expenses"
								{
									datacontext = "[InGameTopbar.GetExpensesBalanceBreakdown]"
								}
							}
						}

						hbox = {
							name = "gold"
							layoutpolicy_vertical = expanding

							hbox = {
								spacing = 6
								margin_top = -11

								icon = {
									name = "gold_icon"
									size = { 30 30 }
									texture = "gfx/interface/icons/icon_gold.dds"
								}

								flowcontainer = {
									margin_bottom = 7
									spacing = -6
									direction = vertical
									ignoreinvisible = yes

									text_single = {
										name = "gold_value_positive"
										layoutpolicy_horizontal = expanding
										visible = "[GreaterThanOrEqualTo_CFixedPoint(GetPlayer.GetGold, '(CFixedPoint)0')]"
										text = "[GetPlayer.GetGold|0]"
										max_width = 50
										default_format = "#high"
										using = Font_Size_Medium
									}

									text_single = {
										name = "gold_value_negative"
										layoutpolicy_horizontal = expanding
										visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, '(CFixedPoint)0')]"


										text = "[GetPlayer.GetGold|0]"
										max_width = 50
										default_format = "#N"
										using = Font_Size_Medium
									}

									container = {
										text_single = {
											name = "balance_positive"
											visible = "[GreaterThanOrEqualTo_CFixedPoint(GetPlayerBalance, '(CFixedPoint)0')]"

											layoutpolicy_horizontal = expanding
											text = "CURRENT_BALANCE"

											max_width = 50
											default_format = "#low"
										}

										text_single = {
											name = "balance_negative"
											visible = "[LessThan_CFixedPoint(GetPlayerBalance, '(CFixedPoint)0')]"

											layoutpolicy_horizontal = expanding
											text = "CURRENT_BALANCE"

											max_width = 50
											default_format = "#N"
										}
									}
								}
							}
						}
					}

					divider_light = {
						layoutpolicy_vertical = expanding
						alpha = 0.8
					}

					hbox = {
						name = "prestige"
						datacontext = "[InGameTopbar.GetPrestigeItem]"
						layoutpolicy_vertical = expanding
						minimumsize = { 90 0 }

						using = tooltip_ne

						hbox = {
							margin_top = -5
							spacing = 7

							icon = {
								name = "prestige_icon"
								size = { 30 30 }
								texture = "[GetPlayer.GetPrestigeLevelTexture]"
							}

							flowcontainer = {
								margin_bottom = 7
								spacing = -6
								direction = vertical

								text_single = {
									name = "prestige_value"
									text = "[GetPlayer.GetPrestige|0]"
									max_width = 50
									default_format = "#high"
									using = Font_Size_Medium
								}

								container_resource_balance = {}
							}
						}

						tooltipwidget = {
							widget_resource_value_tooltip = {}
						}
					}

					divider_light = {
						layoutpolicy_vertical = expanding
						alpha = 0.8
					}

					button = {
						name = "piety"
						datacontext = "[InGameTopbar.GetPietyItem]"
						layoutpolicy_vertical = expanding
						onclick = "[DefaultOnFaithClick(GetPlayer.GetFaith.GetID)]"

						minimumsize = { 90 0 }
						margin_left = 7
						margin_right = 5

						using = tooltip_ne
						tooltipwidget = {
							widget_resource_value_tooltip = {}
						}

						hbox = {
							hbox = {
								margin_top = -5
								spacing = 6

								icon = {
									name = "piety_icon"
									size = { 30 30 }
									texture = "[GetPlayer.GetPietyLevelTexture]"
								}

								flowcontainer = {
									margin_bottom = 7
									spacing = -6
									direction = vertical

									text_single = {
										name = "piety_value"
										text = "[GetPlayer.GetPiety|0]"

										max_width = 50
										default_format = "#high"
										using = Font_Size_Medium
									}

									container_resource_balance = {}
								}
							}
						}
					}

					divider_light = {
						layoutpolicy_vertical = expanding
						alpha = 0.8
					}

					button = {
						name = "renown"
						datacontext = "[InGameTopbar.GetDynastyPrestigeItem]"
						layoutpolicy_vertical = expanding

						onclick = "[DefaultOnHouseCoatOfArmsClick(GetPlayer.GetHouse.GetID)]"

						minimumsize = { 90 0 }
						margin_left = 6
						margin_right = 5

						using = tooltip_ne
						tooltipwidget = {
							widget_resource_value_tooltip = {}
						}

						hbox = {
							hbox = {
								margin_top = -5
								spacing = 6

								icon = {
									visible = "[GetPlayer.IsDynast]"
									texture = "[GetPlayer.GetDynasty.GetDynastyPrestigeLevelTexture]"
									size = { 30 30 }
								}

								icon = {
									visible = "[Not(GetPlayer.IsDynast)]"
									texture = "[GetPlayer.GetDynasty.GetDynastyPrestigeLevelTexture]"
									size = { 30 30 }
									alpha = 0.3
								}

								flowcontainer = {
									visible = "[GetPlayer.IsDynast]"
									margin_bottom = 7
									spacing = -6
									direction = vertical

									text_single = {
										name = "prestige_value"
										text = "[GetPlayer.GetDynasty.GetPrestige|0]"

										max_width = 50
										default_format = "#high"
										using = Font_Size_Medium
									}

									container_resource_balance = {}
								}

								flowcontainer = {
									visible = "[Not(GetPlayer.IsDynast)]"
									margin_bottom = 7
									spacing = -6
									direction = vertical

									text_single = {
										name = "prestige_value_nodynast"
										text = "[GetPlayer.GetDynasty.GetPrestige|0]"

										max_width = 50
										default_format = "#low"
										using = Font_Size_Medium
									}

									container_resource_balance = {}
								}
							}
						}
					}
				}

				hbox = {
					name = "military"
					datacontext = "[GetPlayer]"
					datacontext = "[GetPlayerArmyComposition]"
					spacing = 5
					margin_left = 10
					margin_bottom = 3

					background = {
						texture = "gfx/interface/skinned/overlay_stone.dds"
						margin_right = 20
						margin_top = 20
						margin_bottom = 3
						texture_density = 2
						spritetype = corneredtiled
						color = { 0.4 0.4 0.44 1 }
						alpha = 0.9

						using = Mask_Rough_Edges
					}

					background = {
						texture = "gfx/interface/skinned/hud_top_right_bg_stone.dds"
						margin_right = 10
						margin_left = -2
						margin_top = 4
						texture_density = 2
						spritetype = corneredtiled
					}

					button_group = {
						onclick = "[ToggleGameViewData('military', GetPlayer.GetID)]"
						tooltip = "[ArmyComposition.GetArmyCompositionTooltip]"
						using = tooltip_ne

						flowcontainer = {
							margin = { 0 0 }
							spacing = 5

							icon = {
								name = "icon_soldier"
								texture = "gfx/interface/icons/icon_soldier.dds"
								size = { 25 25 }
							}

							flowcontainer = {
								direction = vertical
								min_width = 65

								flowcontainer = {
									spacing = 2

									text_single = {
										name = "strength"
										text = "[ArmyComposition.GetSoldierCountString]"
										default_format = "#high"
										align = nobaseline
									}

									army_quality_icon = {
										tooltip_enabled = no
									}
								}

								progressbar_standard = {
									name = "soldiers_max"
									size = { 40 8 }

									min = 0
									max = "[IntToFloat(ArmyComposition.GetMaxNumberOfSoldiers)]"
									value = "[IntToFloat(ArmyComposition.GetCurrentNumberOfSoldiers)]"
								}
							}
						}
					}

					button = {
						name = "domain_limit"
						layoutpolicy_vertical = expanding

						minimumsize = { 60 0 }

						margin_left = 3
						margin_bottom = 3

						tooltip = "[Character.GetDomainLimitTooltip]"
						using = tooltip_ne

						onclick = "[ToggleGameView('my_realm')]"

						background = {
							visible = "[GreaterThan_int32( Character.GetDomainSize, Character.GetDomainLimit )]"
							using = Status_Bad
							margin_bottom = -3
						}

						hbox = {
							icon = {
								texture = "gfx/interface/icons/icon_domain.dds"
								size = { 25 25 }
							}

							text_single = {
								name = "value"
								text = "[Character.GetDomainSize]/[Character.GetDomainLimit]"
								align = nobaseline
								margin_bottom = 1

								max_width = 110
							}
						}
					}
				}

				spacer = {
					size = { 10 0 }
				}
			}
		}

		widget = {
			size = { 100% 100% }

			background = {
				texture = "gfx/interface/skinned/hud_top_right_frame.dds"
				margin_left = 20
				margin_bottom = 28
			}
		}
		
		container = {
			position = { 24 3 }
			size = { 40 40 }
			
			tooltipwidget = {
				widget_moon_phase_tooltip = {}
			}
			
			background = {
				using = tooltip_ne
				
				texture = "gfx/interface/icons/moon_phases/Frame/MoonPhase_BG.dds"
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/phases/broken/newmoon_broken.dds"
					visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('base_moon_phase_name').GetFlagName,'new_moon')]"
				}
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/phases/broken/waxingcrescent_broken.dds"
					visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('base_moon_phase_name').GetFlagName,'waxing_crescent_moon')]"
				}
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/phases/broken/firstquarter_broken.dds"
					visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('base_moon_phase_name').GetFlagName,'first_quarter_moon')]"
				}
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/phases/broken/waxinggibbous_broken.dds"
					visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('base_moon_phase_name').GetFlagName,'waxing_gibbous_moon')]"
				}
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/phases/broken/fullmoon_broken.dds"
					visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('base_moon_phase_name').GetFlagName,'full_moon')]"
				}
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/phases/broken/waningcrescent_broken.dds"
					visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('base_moon_phase_name').GetFlagName,'waning_crescent_moon')]"
				}
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/phases/broken/lastquarter_broken.dds"
					visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('base_moon_phase_name').GetFlagName,'last_quarter_moon')]"
				}
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/phases/broken/waninggibbous_broken.dds"
					visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('base_moon_phase_name').GetFlagName,'waning_gibbous_moon')]"
				}
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/overlays/overlay_green.dds"
					visible = "[Or(Not(GetGlobalVariable('current_moon_phase').Var('moon_color').IsSet),EqualTo_string(GetGlobalVariable('current_moon_phase').Var('moon_color').GetFlagName,'default'))]"
				}
				
				modify_texture = {
					blend_mode = overlay
					texture = "gfx/interface/icons/moon_phases/overlays/overlay_red.dds"
					visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('moon_color').GetFlagName,'red')]"
				}
			}
			container = {
				visible = "[Or(Not(GetGlobalVariable('current_moon_phase').Var('moon_color').IsSet),EqualTo_string(GetGlobalVariable('current_moon_phase').Var('moon_color').GetFlagName,'default'))]"
				icon = {
					position = { -15 -7 }
					size = { 65 65 }
					
					texture = "gfx/interface/icons/moon_phases/glow/constant/GlowConstant_Green.dds"
					using = Animation_Glow_Pulse
					
					state = {
						trigger_on_create = yes
				
						name = max_glow
						next = min_glow
						duration = 2
						using = Animation_FadeIn_Standard
					}
				
					state = {
						name = min_glow
						next = max_glow
						duration = 2
						using = Animation_Curve_Default
						alpha = 0.7
					}
				}
			}
			container = {
				visible = "[EqualTo_string(GetGlobalVariable('current_moon_phase').Var('moon_color').GetFlagName,'red')]"
				icon = {
					position = { -15 -7 }
					size = { 65 65 }
					
					texture = "gfx/interface/icons/moon_phases/glow/constant/GlowConstant_Red.dds"
					using = Animation_Glow_Pulse
					
					state = {
						trigger_on_create = yes
				
						name = max_glow
						next = min_glow
						duration = 2
						using = Animation_FadeIn_Standard
					}
				
					state = {
						name = min_glow
						next = max_glow
						duration = 2
						using = Animation_Curve_Default
						alpha = 0.7
					}
				}
			}
		}
	}

	### Outliner Button
	container = {
		visible = "[And( Not( IsPauseMenuShown ), And(Not(IsRightWindowOpen), IsDefaultGUIMode))]"
		parentanchor = top|right
		position = { -3 55 }

		using = Animation_ShowHide_Quick

		button_round = {
			name = "outliner_button"
			size = { 35 35 }
			alpha = 0.7

			onclick = "[ToggleGameView('outliner')]"
			tooltip = "TOGGLE_OUTLINER"

			state = {
				name = _mouse_enter
				alpha = 1
				duration = 0.7
				using = Animation_Curve_Default
			}

			state = {
				name = _mouse_leave
				alpha = 0.7
				duration = 0.2
				using = Animation_Curve_Default
			}

			button_outliner = {
				parentanchor = center
				alwaystransparent = yes
				size = { 25 25 }
			}
		}
	}

	### Main Tabs
	widget = {
		name = "main_tabs"
		visible = "[And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode))]"
		parentanchor = top|right
		position = { 5 105 }
		size = { 50 515 }

		using = Animation_ShowHide_Quick

		widget = {
			visible = "[Not(IsRightWindowOpen)]"
			size = { 100% 100% }

			state = {
				name = _show
				alpha = 1
				duration = 0.1
				using = Animation_Curve_Default
			}

			state = {
				name = _hide
				duration = 0.6
				alpha = 0
				using = Animation_Curve_Default
			}

			icon = {
				size = { 100% 100% }
				texture = "gfx/interface/skinned/hud_maintab_bg.dds"

				@duration_maintab_button_enter = 0.03
				@duration_maintab_button_leave = 0.1

				modify_texture = {
					name = "glow_my_realm"
					texture = "gfx/interface/skinned/hud_maintab_bg_glow.dds"
					blend_mode = colordodge
					translate_uv = { -0.15 -0.04 }
					alpha = 0
				}

				modify_texture = {
					name = "glow_military"
					texture = "gfx/interface/skinned/hud_maintab_bg_glow.dds"
					blend_mode = colordodge
					translate_uv = { -0.15 -0.14 }
					alpha = 0
				}

				modify_texture = {
					name = "glow_council"
					texture = "gfx/interface/skinned/hud_maintab_bg_glow.dds"
					blend_mode = colordodge
					translate_uv = { -0.15 -0.25 }
					alpha = 0
				}

				modify_texture = {
					name = "glow_court"
					texture = "gfx/interface/skinned/hud_maintab_bg_glow.dds"
					blend_mode = colordodge
					translate_uv = { -0.15 -0.42 }
					alpha = 0
				}

				modify_texture = {
					name = "glow_intrigue"
					texture = "gfx/interface/skinned/hud_maintab_bg_glow.dds"
					blend_mode = colordodge
					translate_uv = { -0.15 -0.55 }
					alpha = 0
				}

				modify_texture = {
					name = "glow_factions"
					texture = "gfx/interface/skinned/hud_maintab_bg_glow.dds"
					blend_mode = colordodge
					translate_uv = { -0.15 -0.68 }
					alpha = 0
				}

				modify_texture = {
					name = "glow_decisions"
					texture = "gfx/interface/skinned/hud_maintab_bg_glow.dds"
					blend_mode = colordodge
					translate_uv = { -0.2 -0.79 }
					alpha = 0
				}

				# My Realm
				state = {
					name = "hud_tab_glow_my_realm_enter"
					duration = @duration_maintab_button_enter
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_my_realm"
						alpha = 1
						translate_uv = { -0.15 -0.04 }
					}
				}

				state = {
					name = "hud_tab_glow_my_realm_leave"
					duration = @duration_maintab_button_leave
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_my_realm"
						alpha = 0
						translate_uv = { -0.15 -0.04 }
					}
				}

				# Military
				state = {
					name = "hud_tab_glow_military_enter"
					duration = @duration_maintab_button_enter
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_military"
						alpha = 1
						translate_uv = { -0.15 -0.14 }
					}
				}

				state = {
					name = "hud_tab_glow_military_leave"
					duration = @duration_maintab_button_leave
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_military"
						alpha = 0
						translate_uv = { -0.15 -0.14 }
					}
				}

				# Council
				state = {
					name = "hud_tab_glow_council_enter"
					duration = @duration_maintab_button_enter
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_council"
						alpha = 1
						translate_uv = { -0.15 -0.25 }
					}
				}

				state = {
					name = "hud_tab_glow_council_leave"
					duration = @duration_maintab_button_leave
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_council"
						alpha = 0
						translate_uv = { -0.15 -0.25 }
					}
				}

				# Court
				state = {
					name = "hud_tab_glow_court_enter"
					duration = @duration_maintab_button_enter
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_court"
						alpha = 1
						translate_uv = { -0.15 -0.42 }
					}
				}

				state = {
					name = "hud_tab_glow_court_leave"
					duration = @duration_maintab_button_leave
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_court"
						alpha = 0
						translate_uv = { -0.15 -0.42 }
					}
				}

				# Intrigue
				state = {
					name = "hud_tab_glow_intrigue_enter"
					duration = @duration_maintab_button_enter
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_intrigue"
						alpha = 1
						translate_uv = { -0.15 -0.55 }
					}
				}

				state = {
					name = "hud_tab_glow_intrigue_leave"
					duration = @duration_maintab_button_leave
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_intrigue"
						alpha = 0
						translate_uv = { -0.15 -0.55 }
					}
				}

				# Factions
				state = {
					name = "hud_tab_glow_factions_enter"
					duration = @duration_maintab_button_enter
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_factions"
						alpha = 1
						translate_uv = { -0.15 -0.68 }
					}
				}

				state = {
					name = "hud_tab_glow_factions_leave"
					duration = @duration_maintab_button_leave
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_factions"
						alpha = 0
						translate_uv = { -0.15 -0.68 }
					}
				}

				# Decisions
				state = {
					name = "hud_tab_glow_decisions_enter"
					duration = @duration_maintab_button_enter
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_decisions"
						alpha = 1
						translate_uv = { -0.2 -0.79 }
					}
				}

				state = {
					name = "hud_tab_glow_decisions_leave"
					duration = @duration_maintab_button_leave
					using = Animation_Curve_Default

					modify_texture = {
						name = "glow_decisions"
						alpha = 0
						translate_uv = { -0.2 -0.79 }
					}
				}
			}
		}

		vbox = {
			alwaystransparent = no
			filter_mouse = all
			margin_top = 15
			margin_bottom = 20
			margin_left = 2

			vbox = {
				button_hud_main_tab = {
					name = "tab_my_realm"
					tooltip = "MY_REALM_BUTTON"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_my_realm.dds"

						onclick = "[ToggleGameView('my_realm')]"
						shortcut = "my_realm_window"
						down = "[IsGameViewOpen('my_realm')]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_my_realm_leave','hud_tab_glow_my_realm_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_my_realm_enter','hud_tab_glow_my_realm_leave')]"
					}
				}

				button_hud_main_tab = {
					name = "tab_military"
					tooltip = "MILITARY_BUTTON"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_military.dds"

						onclick = "[ToggleGameViewData('military', GetPlayer.GetID)]"
						shortcut = "military_window"
						down = "[IsGameViewOpen('military')]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_military_leave','hud_tab_glow_military_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_military_enter','hud_tab_glow_military_leave')]"
					}
				}

				button_hud_main_tab = {
					name = "tab_council"
					tooltip = "COUNCIL_BUTTON"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_council.dds"

						onclick = "[ToggleGameViewData('council_window', GetPlayer.GetID)]"
						shortcut = "council_window"
						down = "[IsGameViewOpen('council_window')]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_council_leave','hud_tab_glow_council_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_council_enter','hud_tab_glow_council_leave')]"
					}
				}
			}

			widget = {
				layoutpolicy_horizontal = expanding
				size = { 0 15 }

				icon = {
					visible = "[And( Not( IsPauseMenuShown ), And(Or(Not(IsObserver), GetPlayer.IsValid), IsDefaultGUIMode))]"
					parentanchor = right|vcenter
					position = { -5 0 }
					texture = "gfx/interface/skinned/hud_spike_big.dds"
					size = { 25 15 }

					using = Animation_ShowHide_Standard
				}
			}

			vbox = {
				button_hud_main_tab = {
					name = "tab_court"
					tooltip = "COURT_BUTTON"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_court.dds"

						onclick = "[ToggleGameViewData( 'court_window', GetPlayer.GetID )]"
						shortcut = "court_window"
						down = "[IsGameViewOpen( 'court_window' )]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_court_leave','hud_tab_glow_court_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_court_enter','hud_tab_glow_court_leave')]"
					}
				}

				button_hud_main_tab = {
					name = "tab_intrigue"
					tooltip = "INTRIGUE_BUTTON"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_intrigue.dds"

						onclick = "[ToggleGameViewData('intrigue_window', GetPlayer.GetID)]"
						shortcut = "intrigue_window"
						down = "[IsGameViewOpen('intrigue_window')]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_intrigue_leave','hud_tab_glow_intrigue_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_intrigue_enter','hud_tab_glow_intrigue_leave')]"
					}
				}

				button_hud_main_tab = {
					name = "tab_factions"
					tooltip = "FACTION_BUTTON"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_factions.dds"

						onclick = "[ToggleGameView('factions_window')]"
						shortcut = "factions_window"
						down = "[IsGameViewOpen('factions_window')]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_factions_leave','hud_tab_glow_factions_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_factions_enter','hud_tab_glow_factions_leave')]"
					}
				}

				button_hud_main_tab = {
					name = "tab_decisions"
					tooltip = "DECISIONS_BUTTON"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/skinned/hud_maintab/maintab_decisions.dds"

						onclick = "[ToggleGameView('decisions')]"
						shortcut = "decision_window"
						down = "[IsGameViewOpen('decisions')]"
					}

					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_decisions_leave','hud_tab_glow_decisions_enter')]"
					}

					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_decisions_enter','hud_tab_glow_decisions_leave')]"
					}
				}
				
				button_hud_main_tab = {
					name = "tab_artifacts_open"
					tooltip = "ARTIFACTS_BUTTON"
					blockoverride "maintab_button"
					{
						texture = "gfx/artifacts/maintab_artifacts.dds"
						onclick = "[GetVariableSystem.Toggle('artifact_window_open')]"
					}
					state = {
						name = _initialize
						trigger_on_create = yes
						on_start = "[ExecuteConsoleCommand('gui.createwidget gui/window_artifacts.gui artifacts_view')]"
					}
					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_artifacts_leave','hud_tab_glow_artifacts_enter')]"
					}
					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_artifacts_enter','hud_tab_glow_artifacts_leave')]"
					}
				}
				
				button_hud_main_tab = {
					name = "tab_magic"
					tooltip = "MAGIC_BUTTON"

					blockoverride "maintab_button"
					{
						texture = "gfx/interface/icons/spell_menu/open_spells.dds"
						onclick = "[GetScriptedGui('reset_spells').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						onclick = "[GetVariableSystem.Toggle( 'show_spells')]"
						onclick = "[GetVariableSystem.Toggle( 'show_r_char' )]"
						onclick = "[GetVariableSystem.Clear( 'current_spell' )]"
						onclick = "[GetScriptedGui('get_spell_list').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						onclick = "[GetScriptedGui('realm_char').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						onclick = "[GetScriptedGui('prisoner_char').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						onclick = "[GetScriptedGui('enemy_char').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						onclick = "[GetScriptedGui('realm_lands').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						onclick = "[GetScriptedGui('enemy_realm_lands').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						onclick = "[GetScriptedGui('clear_target_lists').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					}
				}
				
				button_hud_main_tab = {
					name = "tab_cliques"
					tooltip = "CLIQUES_BUTTON"
					visible = "[GetScriptedGui('get_clique_title_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					blockoverride "maintab_button"
					{
						texture = "gfx/artifacts/maintab_artifacts.dds"
						onclick = "[GetVariableSystem.Clear('artifact_window_open')]"
						onclick = "[GetVariableSystem.Toggle('cliques_window_open')]"
						onclick = "[GetScriptedGui('get_clique_title_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					}
					state = {
						name = _initialize
						trigger_on_create = yes
					}
					state = {
						name = _mouse_hierarchy_enter
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_cliques_leave','hud_tab_glow_artifacts_enter')]"
					}
					state = {
						name = _mouse_hierarchy_leave
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('hud_tab_glow_cliques_enter','hud_tab_glow_artifacts_leave')]"
					}
				}
			}

			# Invisible button to ensure that these shortcuts don't get hidden
			button = {
				size = { 0 0 }
				onclick = "[ToggleCharacter( GetPlayer.GetID )]"
				shortcut = "character_window"
			}
		}
	}

	widget_stress_sounds = {}
}

### Time Controls
icon = {
	name = "timeline_widget"
	visible = "[And( Not( IsPauseMenuShown ), TimelineWidget.ShouldBeVisible )]"
	size = { 649 65 }
	parentanchor = bottom|right
	filter_mouse = all
	alwaystransparent = yes
	layer = top
	allow_outside = yes
	texture = "gfx/interface/skinned/hud_bg_gamespeed.dds"

	using = Animation_ShowHide_Quick

	widget = {
		parentanchor = bottom|right
		size = { 629 45 }
		allow_outside = yes

		icon = {
			parentanchor = top|right
			position = { 7 -15}
			texture = "gfx/interface/skinned/component_decoration/decoration_arch.dds"
			size = { 30 30 }
		}

		icon = {
			visible = "[IsManuallyPaused]"
			size = { 100% 100% }
			texture = "gfx/interface/skinned/hud_pause_indicator.dds"
			color = { 0.4 0.25 0.25 0.7 }

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}
		}

		icon = {
			visible = "[IsPausedByEvent]"
			size = { 100% 100% }
			texture = "gfx/interface/skinned/hud_pause_indicator.dds"
			color = { 0.3 0.3 0.3 0.7 }

			state = {
				name = _show
				using = Animation_FadeIn_Quick
			}

			state = {
				name = _hide
				using = Animation_FadeOut_Standard
			}
		}

		hotkeys_HUD = {}

		### Extra Buttons
		flowcontainer = {
			name = "extra_buttons_menu"
			visible = "[And( Not( IsPauseMenuShown ), GetVariableSystem.Exists( 'extra_buttons_expand' ))]"
			parentanchor = bottom|right
			widgetanchor = bottom|hcenter
			position = { -570 -20 }
			alwaystransparent = no
			margin = { 40 40 }
			direction = vertical
			spacing = 3
			ignoreinvisible = yes
			allow_outside = yes

			background = {
				using = Background_Area_Dark
				margin = { -25 -25 }
			}

			state = {
				name = _show
				using = Animation_FadeIn_Quick

				position_y = -20
			}

			state = {
				name = _hide

				using = Animation_FadeOut_Quick
				position_y = 60
			}

			state = {
				name = _mouse_hierarchy_leave
				on_finish = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
			}

			button_standard = {
				name = "find_character_button"
				text = "FIND_CHARACTER"
				onclick = "[ToggleGameView( 'character_finder' )]"
				onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"
				tooltip = "IM_TT_FIND_CHARACTER"
				shortcut = "character_finder"
			}

			button_standard = {
				name = "find_title_button"

				onclick = "[ToggleGameView( 'find_title' )]"
				onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"

				down = "[IsGameViewOpen('find_title')]"
				shortcut = "find_title_shortcut"

				text = "FIND_TITLE"
				tooltip = "IM_TT_FIND_TITLE"
			}

			button_standard = {
				name = "legacy_button"
				text = "SHOW_LEGACY"
				onclick = "[ToggleLegacy]"
				down = "[IsGameViewOpen('succession_event')]"
				onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"
				tooltip = "IM_TT_SHOW_LEGACY"
			}

			button_standard = {
				name = "go_to_capital_button"
				text = "GO_TO_CAPITAL"
				onclick = "[OnGoToPlayerCapital]"
				onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"
				shortcut = "go_to_capital"
				tooltip = "IM_TT_GO_TO_CAPITAL"
				visible = "[GetPlayer.IsValid]"
			}
		}

		hbox = {
			margin_left = 35
			allow_outside = yes

			hbox = {
				margin_top = 12
				spacing = 3

				button_dots = {
					name = "button_hud_extra_buttons"
					onclick = "[GetVariableSystem.Toggle( 'extra_buttons_expand' )]"
					tooltip = MORE_POPOUT_TT
					using = tooltip_ne
				}

				button_menu = {
					name = "pause_menu_button"
					onclick = "[OnPauseMenu]"
					tooltip = INGAME_MENU_TT
					using = tooltip_ne

					tooltipwidget = {
						using = TooltipWithFakeShortcut
						blockoverride "shortcut_text"
						{
							text = FAKE_ESCAPE
						}
					}
				}

				button_encyclopedia_small = {
					name = "encyclopedia_button_extended_menu"
					tooltip = "OPEN_ENCYCLOPEDIA"
					onclick = "[ToggleEncyclopedia]"
					shortcut = "encyclopedia"
					using = tooltip_ne
				}
				
				button_normal = {
					name = "bestiary_button"
					size = { 35 35 }
					alpha = 0.7
					
					button_icon = {
						parentanchor = center
						alwaystransparent = yes
						texture = "gfx/interface/icons/flat_icons/bestiary_icon.dds"
					}
					
					tooltip = "OPEN_BESTIARY"
					
					onclick = "[GetVariableSystem.Toggle( 'show_hunting')]"
					onclick = "[GetVariableSystem.Set( 'hunting_tab' , 'monsters' )]"
					onclick = "[GetVariableSystem.Clear( 'artifact_window_open' )]"
					
					state = {
						name = _mouse_enter
						alpha = 1
						duration = 0.7
						using = Animation_Curve_Default
					}
		
					state = {
						name = _mouse_leave
						alpha = 0.7
						duration = 0.2
						using = Animation_Curve_Default
					}
				}
			}

			hbox = {
				name = "tutorial_highlight_bottom_right_bar"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_right = 5
				margin_left = 15
				margin_top = 12
				allow_outside = yes

				## Date
				button_standard_hover = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					onclick = "[OnPause]"

					tooltip = "CURRENT_DATE_TOOLTIP"
					using = tooltip_nw
					tooltip_offset = { 0 10 }

					margin_widget = {
						visible = "[Not(Or(IsPausedByEvent, IsManuallyPaused))]"
						size = { 100% 100% }

						state = {
							name = _show
							using = Animation_FadeIn_Quick
						}

						state = {
							name = _hide
							using = Animation_FadeOut_Standard
						}

						Animation_HUD_daily_tick = {
							visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)1')]"
							size = { 100% 100% }

							blockoverride "duration"
							{
								duration = 30
							}

							blockoverride "alpha"
							{
								alpha = 0.3
							}
						}

						Animation_HUD_daily_tick = {
							visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)2')]"
							size = { 100% 100% }

							blockoverride "duration"
							{
								duration = 15
							}

							blockoverride "alpha"
							{
								alpha = 0.25
							}
						}

						Animation_HUD_daily_tick = {
							visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)3')]"
							size = { 100% 100% }

							blockoverride "duration"
							{
								duration = 7.5
							}

							blockoverride "alpha"
							{
								alpha = 0.2
							}
						}

						Animation_HUD_daily_tick = {
							visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)4')]"
							size = { 100% 100% }

							blockoverride "duration"
							{
								duration = 3.75
							}

							blockoverride "alpha"
							{
								alpha = 0.15
							}
						}

						Animation_HUD_daily_tick = {
							visible = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)5')]"
							size = { 100% 100% }

							blockoverride "duration"
							{
								duration = 1.9
							}

							blockoverride "alpha"
							{
								alpha = 0.15
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 5 0 }
						margin_bottom = 2

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 2
							margin_right = 2

							expand = {}

							text_single = {
								name = "date_text_sp"
								visible = "[Not(GameHasMultiplePlayers)]"

								text = "CURRENT_DATE"
								default_format = "#date"
								align = right|nobaseline
								using = Font_Size_Medium
							}

							text_single = {
								name = "date_text_mp"
								visible = "[GameHasMultiplePlayers]"
								layoutpolicy_horizontal = expanding

								text = "CURRENT_DATE"
								default_format = "#medium;glow_color:{0.1,0.1,0.1,1}"
								align = right|nobaseline
								using = Font_Size_Medium
							}
						}

						container = {
							name = "pause_play_icons"

							button_pause = {
								visible = "[Not(Or(IsPausedByEvent, IsManuallyPaused))]"
								alwaystransparent = yes
								parentanchor = center
							}

							button_play = {
								visible = "[Or(IsPausedByEvent, IsManuallyPaused)]"
								alwaystransparent = yes
								parentanchor = center
							}
						}
					}
				}

				button_normal = {
					shortcut = "decrease_speed"
					shortcut = "decrease_speed_2"
					shortcut = "decrease_speed_3"
					onclick = "[OnDecreaseGameSpeed]"
				}

				button_normal = {
					shortcut = "increase_speed"
					shortcut = "increase_speed_2"
					shortcut = "increase_speed_3"
					onclick = "[OnIncreaseGameSpeed]"
				}

				hbox = {
					layoutpolicy_vertical = expanding
					margin_bottom = -6
					margin_top = -4
					allow_outside = yes

					icon = {
						name = "speed_indicator"
						layoutpolicy_vertical = expanding
						size = { 170 0 }
						framesize = { 200 30 }
						texture = "gfx/interface/hud/speed_indicator.dds"
						frame = "[GetCurrentGameSpeed]"
						tooltip = "CURRENT_SPEED_TOOLTIP"
						tooltip_offset = { 0 -170 }
						alpha = 0.8

						modify_texture = {
							visible = "[And(IsPausedByEvent, Not(IsManuallyPaused))]"
							texture = "gfx/interface/hud/speed_indicator_auto_pause.dds"
							spritetype = corneredtiled
							blend_mode = darken
							texture_density = 2
						}

						modify_texture = {
							visible = "[IsManuallyPaused]"
							texture = "gfx/interface/hud/speed_indicator_pause.dds"
							spritetype = corneredtiled
							blend_mode = darken
							texture_density = 2
						}

						modify_texture = {
							visible = "[Not(Or(IsPausedByEvent, IsManuallyPaused))]"
							texture = "gfx/interface/hud/speed_indicator_play.dds"
							spritetype = corneredtiled
							blend_mode = darken
							texture_density = 2
						}

						button = {
							visible = "[Not( GameHasMultiplePlayers )]"
							onclick = "[OnPause]"
							shortcut = "pause"
						}

						icon = {
							parentanchor = right|vcenter
							position = { 10 0 }
							size = { 15 90%}
							texture = "gfx/interface/skinned/overlay_stone.dds"
							color = { 0.32 0.32 0.32 1 }
						}

						icon = {
							size = { 100% 100% }
							texture = "gfx/interface/skinned/speed_indicator_frame.dds"
						}

						hbox = {
							margin_left = 6
							margin_right = 6

							button = {
								name = "speed_1"
								shortcut = "speed_1"
								layoutpolicy_horizontal = shrinking
								layoutpolicy_vertical = expanding
								size = { 34 18 }

								alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)1')]"
								onclick = "[SetGameSpeed('(int32)0')]"
								tooltip = "CHANGE_SPEED_TOOLTIP_1"
								using = tooltip_ne

								alpha = 0

								state = {
									name = _mouse_enter
									alpha = 1
									duration = 0.1
									using = Animation_Curve_Default
								}

								state = {
									name = _mouse_leave
									alpha = 0
									duration = 0.1
									using = Animation_Curve_Default
								}

								margin_widget = {
									size = { 100% 100% }
									margin = { 0 7 }

									icon = {
										size = { 100% 100% }
										texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
									}
								}
							}

							button = {
								name = "speed_2"
								shortcut = "speed_2"
								layoutpolicy_horizontal = shrinking
								layoutpolicy_vertical = expanding
								size = { 34 18 }

								alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)2')]"
								onclick = "[SetGameSpeed('(int32)1')]"
								tooltip = "CHANGE_SPEED_TOOLTIP_2"
								using = tooltip_ne

								alpha = 0

								state = {
									name = _mouse_enter
									alpha = 1
									duration = 0.1
									using = Animation_Curve_Default
								}

								state = {
									name = _mouse_leave
									alpha = 0
									duration = 0.1
									using = Animation_Curve_Default
								}

								margin_widget = {
									size = { 100% 100% }
									margin = { 0 7 }

									icon = {
										size = { 100% 100% }
										texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
									}
								}
							}

							button = {
								name = "speed_3"
								shortcut = "speed_3"
								layoutpolicy_horizontal = shrinking
								layoutpolicy_vertical = expanding
								size = { 34 18 }

								alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)3')]"
								onclick = "[SetGameSpeed('(int32)2')]"
								tooltip = "CHANGE_SPEED_TOOLTIP_3"
								using = tooltip_ne

								alpha = 0

								state = {
									name = _mouse_enter
									alpha = 1
									duration = 0.1
									using = Animation_Curve_Default
								}

								state = {
									name = _mouse_leave
									alpha = 0
									duration = 0.1
									using = Animation_Curve_Default
								}

								margin_widget = {
									size = { 100% 100% }
									margin = { 0 7 }

									icon = {
										size = { 100% 100% }
										texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
									}
								}
							}

							button = {
								name = "speed_4"
								shortcut = "speed_4"
								layoutpolicy_horizontal = shrinking
								layoutpolicy_vertical = expanding
								size = { 34 18 }

								alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)4')]"
								onclick = "[SetGameSpeed('(int32)3')]"
								tooltip = "CHANGE_SPEED_TOOLTIP_4"
								using = tooltip_ne

								alpha = 0

								state = {
									name = _mouse_enter
									alpha = 1
									duration = 0.1
									using = Animation_Curve_Default
								}

								state = {
									name = _mouse_leave
									alpha = 0
									duration = 0.1
									using = Animation_Curve_Default
								}

								margin_widget = {
									size = { 100% 100% }
									margin = { 0 7 }

									icon = {
										size = { 100% 100% }
										texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
									}
								}
							}

							button = {
								name = "speed_5"
								shortcut = "speed_5"
								layoutpolicy_horizontal = shrinking
								layoutpolicy_vertical = expanding
								size = { 34 18 }

								alwaystransparent = "[EqualTo_int32(GetCurrentGameSpeed, '(int32)5')]"
								onclick = "[SetGameSpeed('(int32)4')]"
								tooltip = "CHANGE_SPEED_TOOLTIP_5"
								using = tooltip_ne

								alpha = 0

								state = {
									name = _mouse_enter
									alpha = 1
									duration = 0.1
									using = Animation_Curve_Default
								}

								state = {
									name = _mouse_leave
									alpha = 0
									duration = 0.1
									using = Animation_Curve_Default
								}

								margin_widget = {
									size = { 100% 100% }
									margin = { 0 7 }

									icon = {
										size = { 100% 100% }
										texture = "gfx/interface/hud/speed_indicator_mouseover.dds"
									}
								}
							}
						}
					}
				}
			}

			# Just the hotkeys for increase/decrease speed
			container = {
				name = "speed_hotkeys"

				button = {
					name = "increase_speed"
					size = { 0 0 }

					shortcut = "increase_speed"
					shortcut = "increase_speed_2"
					onclick = "[OnIncreaseGameSpeed]"
					oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
				}

				button = {
					name = "decrease_speed"
					size = { 0 0 }

					shortcut = "decrease_speed"
					shortcut = "decrease_speed_2"
					onclick = "[OnDecreaseGameSpeed]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
				}
			}

			widget_gamespeed_sounds = {}
		}
	}
}

### Bottom Left
widget = {
	name = "bottom_bar"
	visible = "[And( Not( IsPauseMenuShown ), IsDefaultGUIMode )]"
	size = { 100% 100% }
	layer = bottom
	datacontext = "[GetPlayer]"

	using = Animation_ShowHide_Quick
	
	#############################
	# HUNTING UI BY HAPCHAZZARD #
	#############################
	
	window = {
		name = "hunting_encyclopedia"
		size = { 100% 100% }
		movable = no
		layer = top
		
		visible = "[GetVariableSystem.Exists( 'show_hunting')]"
	
		using = Window_Size_MainTab
	
		state = {
			name = _show
			using = Animation_FadeIn_Standard
			using = Sound_WindowShow_Standard
			using =	Sound_Window_AmbienceMute_Snapshot
		}
	
		state = {
			name = _hide
			using = Animation_FadeOut_Standard
			using = Sound_WindowHide_Standard
		}
		
		button_normal = {
			size = { 100% 100% }
			onclick = "[Encyclopedia.Hide]"
	
			using = Background_Full_Dim
		}

		widget = {
			parentanchor = center
			size = { 880 850 }
			alwaystransparent = no
	
			using = Window_Background
			using = Window_Decoration_Frontend_Spike
	
			vbox = {
				using = Window_Margins
				
				header_pattern = {
					layoutpolicy_horizontal = expanding
	
					blockoverride "header_text"
					{
						text = "HUNTING_WINDOW_TITLE"
					}
	
					blockoverride "button_close"
					{
						onclick = "[GetVariableSystem.Clear( 'show_hunting')]"
					}
				}
				
				hbox = {
					layoutpolicy_horizontal = expanding
	
					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set('hunting_tab' , 'monsters')]"
						down = "[GetVariableSystem.HasValue('hunting_tab' , 'monsters')]"
						
						text_single = {
							text = "HUNTING_WINDOW_MONSTERS"
							parentanchor = center
	
							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}
	
					button_tab = {
						layoutpolicy_horizontal = expanding
						onclick = "[GetVariableSystem.Set('hunting_tab' , 'biozones')]"
						down = "[GetVariableSystem.HasValue('hunting_tab' , 'biozones')]"
	
						text_single = {
							text = "HUNTING_WINDOW_BIOZONES"
							parentanchor = center
							
							maximumsize = { 400 -1 }
							default_format = "#low"
						}
					}
				}
				
				scrollbox = {
					name = "tab_monsters"
					visible = "[GetVariableSystem.HasValue( 'hunting_tab', 'monsters' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
				
					blockoverride "scrollbox_background" {}
					blockoverride "scrollbox_background_fade" {}
				
					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}
				
					state = {
						name = _hide
						alpha = 0
					}
					
					background = {
						texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
						fittype = end
						alpha = 0.4
	
						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
							blend_mode = alphamultiply
						}
	
						modify_texture = {
							texture = "gfx/interface/component_masks/mask_vignette.dds"
							blend_mode = alphamultiply
							alpha = 0.4
						}
					}
				
					blockoverride "scrollbox_content"
					{
						vbox = {
							name = "monsters"
							datamodel = "[GetGlobalList('hunting_game_info_provinces')]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
				
							item = {
								vbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding
									spacing = 5
									
									vbox = {
										name = "monster_list_item"
										margin_right = 15
										margin_left = 5
										margin_bottom = 30
										margin_top = 30
										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding
										
										background = {
											using = Background_Area
											alpha = 0.2
										}
										
										hbox = {
											layoutpolicy_horizontal = expanding
											vbox = {
												text_single = {
													text = "[Localize(Concatenate(Scope.Var('game_tier').GetFlagName,'_tier_color_prefix'))] [Localize(Concatenate(Scope.Var('game_name').GetFlagName,'_name'))]"
													align = left|top
													layoutpolicy_vertical = expanding
													layoutpolicy_horizontal = expanding
													
													default_format = "#high"
													using = Font_Type_Standard
													fontsize = 24
													
													margin_top = 5
													margin_left = 20
												}
												text_single = {
													text = "[SelectLocalization(Scope.Var('game_size').IsSet,Concatenate(Scope.Var('game_size').GetFlagName,'_game_tag_normal_text'),'')] [Localize(Concatenate(Scope.Var('game_type').GetFlagName,'_game_tag_normal_text'))] [SelectLocalization(Scope.Var('game_elemental_type').IsSet,Concatenate('(',Concatenate(Localize(Concatenate(Scope.Var('game_elemental_type').GetFlagName,'_game_tag_normal_text')),')')),'')]"
													visible = "[Scope.Var('game_type').IsSet]"
													align = left|top
													layoutpolicy_vertical = expanding
													layoutpolicy_horizontal = expanding
													
													default_format = "#EMP Test#!"
													using = Font_Type_Standard
													fontsize = 14
													
													margin_bottom = 5
													margin_left = 20
												}
											}
											expand = {}
											text_single = {
												text = "@hunt_kills_icon! [SelectLocalization(GetPlayer.MakeScope.Var(Concatenate(Scope.Var('game_name').GetFlagName , '_kills')).IsSet,'#color_white','#color_gray')] [GetPlayer.MakeScope.Var(Concatenate(Scope.Var('game_name').GetFlagName , '_kills')).GetValue|0]#! @hunt_kills_dynasty_icon! [SelectLocalization(GetPlayer.GetDynasty.MakeScope.Var(Concatenate(Scope.Var('game_name').GetFlagName , '_kills')).IsSet,'#color_white','#color_gray')] [GetPlayer.GetDynasty.MakeScope.Var(Concatenate(Scope.Var('game_name').GetFlagName , '_kills')).GetValue|0]#!"
												align = right|top
												layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding
												
												default_format = "#high"
												using = Font_Type_Standard
												fontsize = 24
												
												margin_top = 5
												margin_bottom = 5
												margin_left = 20
												margin_right = 20
											}
											background = {
												using = Background_Area_ExtraDark
												alpha = 0.6
												visible = "[GetPlayer.MakeScope.Var(Concatenate(Scope.Var('game_name').GetFlagName , '_kills')).IsSet]"
											}
											background = {
												using = Background_Area_Dark
												alpha = 0.4
												visible = "[Not(GetPlayer.MakeScope.Var(Concatenate(Scope.Var('game_name').GetFlagName , '_kills')).IsSet)]"
											}
										}
										
										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											
											margin_left = 10
											margin_top = 5

											textbox = {
												text = "[SelectLocalization('(bool)no','',Concatenate(Scope.Var('game_name').GetFlagName,'_encyclopedia_desc'))]"
												minimumsize = { 300 100 }
												maximumsize = { 300 500 }
												multiline = yes
												autoresize = yes
											}
											divider_light = {
												layoutpolicy_vertical = expanding
												parentanchor = left
											}
											vbox = {
												margin_left = 10
												flowcontainer = {
													datamodel = "[Scope.GetList('game_tag_list')]"
													minimumsize = { 150 100 }
													maximumsize = { 150 500 }
													direction = vertical
													
													item = {
														text_single = {
															text = "[SelectLocalization('(bool)no','',Concatenate(Scope.GetFlagName,'_game_tag_tooltip'))]"
															align = hcenter|top
														}
													}
												}
												
												expand = {}
											}
											divider_light = {
												layoutpolicy_vertical = expanding
												parentanchor = left
											}
											vbox = {
												margin_left = 10
												flowcontainer = {
													datamodel = "[Scope.GetList('game_contained_in_biozone_list')]"
													minimumsize = { 150 100 }
													maximumsize = { 150 500 }
													direction = vertical
													
													item = {
														text_single = {
															text = "[SelectLocalization('(bool)no','',Concatenate(Scope.GetProvince.MakeScope.Var('biozone_name').GetFlagName,'_name'))]"
															align = hcenter|top
														}
													}
												}
												
												expand = {}
											}
										}
									}
								}
							}
						}
					}
				}
				
				################
				# Biozones Tab #
				################
				scrollbox = {
					name = "tab_biozones"
					visible = "[GetVariableSystem.HasValue( 'hunting_tab', 'biozones' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
				
					blockoverride "scrollbox_background" {}
					blockoverride "scrollbox_background_fade" {}
				
					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}
				
					state = {
						name = _hide
						alpha = 0
					}
					
					background = {
						texture = "gfx/interface/illustrations/event_scenes/forest_pine.dds"
						fittype = end
						alpha = 0.4
	
						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
							blend_mode = alphamultiply
						}
	
						modify_texture = {
							texture = "gfx/interface/component_masks/mask_vignette.dds"
							blend_mode = alphamultiply
							alpha = 0.4
						}
					}
				
					blockoverride "scrollbox_content"
					{
						vbox = {
							name = "biozones"
							datamodel = "[GetGlobalList('hunting_biozone_info_provinces')]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
				
							item = {
								vbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding
									spacing = 5
									
									vbox = {
										name = "biozone_list_item"
										margin_right = 15
										margin_left = 5
										margin_bottom = 30
										margin_top = 30
										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding
										
										background = {
											using = Background_Area
											alpha = 0.2
										}
										
										hbox = {
											layoutpolicy_horizontal = expanding
											text_single = {
												text = "[Localize(Concatenate(Scope.Var('biozone_tier').GetFlagName,'_danger_tier_color_prefix'))] [SelectLocalization('(bool)no','',Concatenate(Scope.GetProvince.MakeScope.Var('biozone_name').GetFlagName,'_name'))]"
												align = left|top
												layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding
												
												default_format = "#high"
												using = Font_Type_Standard
												fontsize = 24
												
												margin_top = 5
												margin_bottom = 5
												margin_left = 20
											}
											expand = {}
											background = {
												using = Background_Area_Dark
												alpha = 0.4
											}
										}
										
										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											parentanchor = hcenter|top
											
											margin_left = 10
											margin_top = 5

											textbox = {
												text = "[SelectLocalization('(bool)no','',Concatenate(Scope.Var('biozone_name').GetFlagName,'_encyclopedia_desc'))]"
												minimumsize = { 300 100 }
												maximumsize = { 300 500 }
												multiline = yes
												autoresize = yes
											}
											divider_light = {
												layoutpolicy_vertical = expanding
												parentanchor = left
											}
											vbox = {
												margin_left = 10
												flowcontainer = {
													datamodel = "[Scope.GetList('biozone_tag_list')]"
													minimumsize = { 150 100 }
													maximumsize = { 150 500 }
													direction = vertical
													
													item = {
														text_single = {
															text = "[SelectLocalization('(bool)no','',Concatenate(Scope.GetFlagName,'_tooltip'))]"
															align = hcenter|top
														}
													}
												}
												
												expand = {}
											}
											divider_light = {
												layoutpolicy_vertical = expanding
												parentanchor = left
											}
											vbox = {
												margin_left = 10
												flowcontainer = {
													datamodel = "[Scope.GetList('biozone_contains_game_list')]"
													minimumsize = { 150 100 }
													maximumsize = { 150 500 }
													direction = vertical
													
													item = {
														text_single = {
															text = "[SelectLocalization('(bool)no','',Concatenate(Scope.GetProvince.MakeScope.Var('game_name').GetFlagName,'_name'))]"
															align = hcenter|top
														}
													}
												}
												
												expand = {}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	##############################
	# CLIQUE MENU BY HAPCHAZZARD #
	##############################
	
	window = {
		name = "cliques_view"
		parentanchor = top|right
		layer = windows_layer
		movable = no
		using = Window_Size_MainTab
		visible = "[And(GetVariableSystem.Exists('cliques_window_open'),IsInGame)]"	
		state = {
			name = _hide
			trigger_when = "[Not(GetVariableSystem.Exists('cliques_window_open'))]"
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
			using = Window_Position_MainTab_Hide
			trigger_on_create = yes
			trigger_when = "[IsGameViewOpen('my_realm')]"
			trigger_when = "[IsGameViewOpen('military')]"
			trigger_when = "[IsGameViewOpen('council_window')]"
			trigger_when = "[IsGameViewOpen('court_window')]"
			trigger_when = "[IsGameViewOpen('intrigue_window')]"
			trigger_when = "[IsGameViewOpen('factions_window')]"
			trigger_when = "[IsGameViewOpen('decisions')]"
			trigger_when = "[GetVariableSystem.Exists('artifact_window_open')]"
	
			on_start = "[GetVariableSystem.Clear('cliques_window_open')]"
			on_start = "[GetVariableSystem.Clear('show_allied_cliques')]"
		}
		state = {
			name = _show
			trigger_when = "[GetVariableSystem.Exists('artifact_window_open')]"
			using = Animation_FadeIn_Quick
			using = Sound_WindowShow_Standard
			using = Window_Position_MainTab
			on_start = "[PdxGuiTriggerAllAnimations( Select_CString( IsGameViewOpen('my_realm'), 'if_my_realm_open', 'else_do_nothing' ) )]"
			on_start = "[PdxGuiTriggerAllAnimations( Select_CString( IsGameViewOpen('military'), 'if_military_open', 'else_do_nothing' ) )]"
			on_start = "[PdxGuiTriggerAllAnimations( Select_CString( IsGameViewOpen('council_window'), 'if_council_open', 'else_do_nothing' ) )]"
			on_start = "[PdxGuiTriggerAllAnimations( Select_CString( IsGameViewOpen('court_window'), 'if_court_open', 'else_do_nothing' ) )]"
			on_start = "[PdxGuiTriggerAllAnimations( Select_CString( IsGameViewOpen('intrigue_window'), 'if_intrigue_open', 'else_do_nothing' ) )]"
			on_start = "[PdxGuiTriggerAllAnimations( Select_CString( IsGameViewOpen('factions_window'), 'if_factions_open', 'else_do_nothing' ) )]"
			on_start = "[PdxGuiTriggerAllAnimations( Select_CString( IsGameViewOpen('decisions'), 'if_decisions_open', 'else_do_nothing' ) )]"
			on_start = "[GetScriptedGui('get_character_cliques_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
		}
		state = {
			name = if_my_realm_open
			on_start = "[ToggleGameView('my_realm')]"
		}
		state = {
			name = if_military_open
			on_start = "[ToggleGameViewData('military', GetPlayer.GetID)]"
		}
		state = {
			name = if_council_open
			on_start = "[ToggleGameViewData('council_window', GetPlayer.GetID)]"
		}
		state = {
			name = if_court_open
			on_start = "[ToggleGameViewData( 'court_window', GetPlayer.GetID )]"
		}
		state = {
			name = if_intrigue_open
			on_start = "[ToggleGameViewData('intrigue_window', GetPlayer.GetID)]"
		}
		state = {
			name = if_factions_open
			on_start = "[ToggleGameView('factions_window')]"
		}
		state = {
			name = if_decisions_open
			on_start = "[ToggleGameView('decisions')]"
		}
	
		state = {
			name = else_do_nothing
		}
	
		background = {
			texture = "gfx/interface/component_tiles/solid_black_label.dds"
			margin_left = -40
			fittype = centercrop
		}
		
		margin_widget = {
			size = { 100% 100% }
			margin = { 0 26 }
			margin_right = 20
			widget = {
				size = { 100% 100% }
				using = Window_Background
				
				vbox = {
					using = Window_Margins
					
					header_pattern = {
						layoutpolicy_horizontal = expanding
						
						blockoverride "header_text"
						{
							text = "CLIQUES_VIEW_TITLE"
						}
						
						blockoverride "button_close"
						{
							onclick = "[GetVariableSystem.Clear('cliques_window_open')]"
						}
					}
					
					button_checkbox_label = {
						visible = "[GetScriptedGui('allied_cliques_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						onclick = "[GetVariableSystem.Toggle( 'show_allied_cliques')]"
						onclick = "[GetScriptedGui('allied_cliques_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

						blockoverride "checkbox"
						{
							checked = "[GetVariableSystem.Exists( 'show_allied_cliques')]"
						}

						blockoverride "text"
						{
							text = "Show Allied Cliques"
							min_width = 100
						}
					}
					
					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						
						blockoverride "scrollbox_content"
						{	
							vbox = {
								name = "clique_list"
								datamodel = "[GetPlayer.MakeScope.GetList('displayed_character_cliques')]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								
								parentanchor = hcenter|top
								
								item = {
									visible = "[GetScriptedGui('clique_visibility_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('relevant_clique',Scope.Province.MakeScope).End)]"
									vbox = {
										layoutpolicy_horizontal = expanding
										spacing = 5
										
										divider_light = {
											layoutpolicy_horizontal = expanding
										}
										
										background = {
											using = Background_Area
											alpha = 0.2
										}
										
										hbox = {
											layoutpolicy_horizontal = expanding
											
											coa_title_tiny_crown = {
												visible = "[GetScriptedGui('clique_is_external_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('relevant_clique',Scope.Province.MakeScope).End)]"
												datacontext = "[Scope.Var('latched_to_title').GetLandedTitle]"
											}
											
											text_single = {
												name = "name_clique"
												layoutpolicy_horizontal = expanding
												text = "[Localize(Concatenate(Scope.Var('clique_name').GetFlagName,'_name'))]"
												align = nobaseline
												default_format = "#high"
												using = Font_Type_Flavor
												fontsize = 26
												autoresize = yes
												margin_left = 10
											}
											
											background = {
												using = Background_Area_Solid
												margin_bottom = 10
												margin_top = 10
												margin_left = 5
												margin_right = 5
											}
											
											text_single = {
												name = "clique_power"
												visible = "[Not(GetScriptedGui('clique_is_external_or_secret_society_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('relevant_clique',Scope.GetProvince.MakeScope).End))]"
												layoutpolicy_horizontal = expanding
												text = "[GuiScope.SetRoot( Scope.GetProvince.MakeScope ).ScriptValue('clique_power_percentage')|1] %"
												align = right
												default_format = "#medium"
												using = Font_Type_Standard
												fontsize = 20
												autoresize = yes
												margin_right = 30
											}
											
											expand = {}
											
											hbox = {
												visible = "[GetScriptedGui('clique_is_external_or_secret_society_scripted_gui').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('relevant_clique',Scope.GetProvince.MakeScope).End)]"
												icon = {
													name = "powerbase_icon"
													size = { 30 30 }
													framesize = { 28 28 }
													texture = "gfx/interface/icons/portraits/powerful_vassal_small.dds"
													frame = 3
												}
												
												text_single = {
													name = "clique_power"
													layoutpolicy_horizontal = expanding
													text = "[GuiScope.SetRoot( Scope.GetProvince.MakeScope ).ScriptValue('clique_total_power')|1]"
													align = right
													default_format = "#medium"
													using = Font_Type_Standard
													fontsize = 20
													autoresize = yes
													margin_right = 30
												}
											}
										}
										
										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											
											margin_top = 10
											margin_left = 10
											margin_right = 10
											
											textbox = {
												name = "clique_desc"
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												text = "[SelectLocalization('(bool)no','',Concatenate(Scope.Var('clique_name').GetFlagName,'_desc'))]"
												align = nobaseline
												default_format = "#high"
												using = Font_Type_Standard
												autoresize = yes
												multiline = yes
												
												max_width = 500
											}
										}
										
										divider_light = {
											layoutpolicy_horizontal = expanding
											alpha = 0.8
										}
										
										hbox = {
											layoutpolicy_vertical = expanding
											layoutpolicy_horizontal = expanding
											vbox = {
												layoutpolicy_vertical = expanding
												
												text_single = {
													text = "GUIDING_VALUES_TITLE"
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													default_format = "#weak"
													align = center
													
													tooltip = "GUIDING_VALUES_TOOLTIP"
												}
												
												dynamicgridbox = {
													name = "guiding_virtues_grid"
													datamodel = "[Scope.GetList('clique_guiding_principle_traits')]"
													flipdirection = yes
													datamodel_wrap = 3
		
													item = {
														icon = {
															datacontext = "[GetTrait(Scope.GetFlagName)]"
															size = { 40 40 }
															alwaystransparent = yes
															texture = "[Trait.GetIcon( GetPlayer )]"
		
															#tooltipwidget = {
															#	using = clique_window_trait_tooltip
															#}
		
															block "tooltip_placement"
															{
																using = tooltip_ne
																tooltip_offset = { 0 20 }
															}
														}
													}
												}
												
												text_single = {
													text = "OPPOSED_VALUES_TITLE"
													visible = "[GetScriptedGui('clique_has_opposed_values_scripted_gui').IsShown(GuiScope.SetRoot(Scope.GetProvince.MakeScope).End)]"
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													default_format = "#weak"
													align = center
													
													tooltip = "OPPOSED_VALUES_TOOLTIP"
												}
												
												dynamicgridbox = {
													name = "opposed_traits_grid"
													datamodel = "[Scope.GetList('clique_guiding_principle_opposed_traits')]"
													flipdirection = yes
													datamodel_wrap = 3
		
													item = {
														icon = {
															datacontext = "[GetTrait(Scope.GetFlagName)]"
															size = { 40 40 }
															alwaystransparent = yes
															texture = "[Trait.GetIcon( GetPlayer )]"
		
															block "tooltip_placement"
															{
																using = tooltip_ne
																tooltip_offset = { 0 20 }
															}
														}
													}
												}
												
												text_single = {
													text = "FAVORED_SKILLS_TITLE"
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													default_format = "#weak"
													align = center
												}
												
												dynamicgridbox = {
													datamodel = "[Scope.GetList('clique_guiding_principle_skills')]"
													flipdirection = yes
													datamodel_wrap = 3
													item = {
														flowcontainer = {
															margin_left = 10
															margin_right = 15
															spacing = 4
														
															background = {
																name = "skill_icon_bg"
																texture = "gfx/interface/window_character/character_view_skills_bg.dds"
																framesize = { 70 26 }
														
																block "bg"
																{
																	frame = "[Select_int32( EqualTo_string(Scope.GetFlagName,'Diplomacy') , '(int32)1', Select_int32(EqualTo_string(Scope.GetFlagName,'Martial'),'(int32)2', Select_int32(EqualTo_string(Scope.GetFlagName,'Stewardship'),'(int32)3', Select_int32(EqualTo_string(Scope.GetFlagName, 'Intrigue'), '(int32)4' , Select_int32(EqualTo_string(Scope.GetFlagName, 'Learning'), '(int32)5', '(int32)6')) ) ) )]"
																}
															}
														
															block "tooltip"
															{
																tooltip = "SKILL_ITEM_TOOLTIP"
															}
														
															icon = {
																name = "skill_icon"
																texture = "gfx/interface/icons/icon_skills.dds"
																framesize = { 60 60 }
														
																block "icon"
																{
																	frame = "[Select_int32( EqualTo_string(Scope.GetFlagName,'Diplomacy') , '(int32)1', Select_int32(EqualTo_string(Scope.GetFlagName,'Martial'),'(int32)2', Select_int32(EqualTo_string(Scope.GetFlagName,'Stewardship'),'(int32)3', Select_int32(EqualTo_string(Scope.GetFlagName, 'Intrigue'), '(int32)4' , Select_int32(EqualTo_string(Scope.GetFlagName, 'Learning'), '(int32)5', '(int32)6')) ) ) )]"
																}
														
																block "icon_size"
																{
																	size = { 30 30 }
																}
														
															}
														}
													}
												}
												
												text_single = {
													text = "CLIQUE_ASPECTS_TITLE"
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													default_format = "#weak"
													align = center
												}
												
												vbox = {
													datamodel = "[Scope.GetList('clique_guiding_principle_aspects')]"
													
													item = {
														text_single = {
															text = "[SelectLocalization('(bool)no','',Concatenate(Scope.GetFlagName,'_name'))]"
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding
															align = center
															margin_bottom = 10
															tooltip = "[SelectLocalization('(bool)no','',Concatenate(Scope.GetFlagName,'_tooltip'))]"
														}
													}
												}
												
												text_single = {
													visible = "[GetScriptedGui('clique_has_geographic_constraint_scripted_gui').IsShown(GuiScope.SetRoot(Scope.GetProvince.MakeScope).End)]"
													text = "Constrained to [Scope.Var('clique_geographic_constraint').Title.GetNameNoTier]"
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													align = center
													margin_bottom = 10
												}
											}
											 
											vbox = {
												layoutpolicy_vertical = expanding
												
												vbox = {
													text_single = {
														text = "CLIQUE_LEADER"
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														default_format = "#weak"
														align = center
														margin_bottom = 5
													}
													text_single = {
														text = "[Scope.Var('clique_leader').GetCharacter.GetName]"
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														align = center
														margin_bottom = 10
													}
													container = {
														datacontext = "[Scope.Var('clique_leader').GetCharacter]"
														visible = "[Scope.Var('clique_leader').IsSet]"
			
														portrait_head_cached = {
														
														}
													}
												}
												vbox = {
													datamodel = "[Scope.GetList('valid_clique_interactions')]"
													text_single = {
														text = "CLIQUE_INTERACTIONS_TITLE"
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														default_format = "#weak"
														align = center
														margin_bottom = 10
													}
													
													button_standard = {
														name = "join_clique_button"
										
														onclick = "[GetScriptedGui('join_clique_scripted_gui').Execute(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]"
														visible = "[GetScriptedGui('join_clique_scripted_gui').IsShown(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]"
														enabled = "[GetScriptedGui('join_clique_scripted_gui').IsValid(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]"
														tooltip = "[GetScriptedGui('join_clique_scripted_gui').BuildTooltip(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]" 
										
														text = "JOIN_CLIQUE"
														parentanchor = top
													}
													
													button_standard = {
														name = "leave_clique_button"
										
														onclick = "[GetScriptedGui('leave_clique_scripted_gui').Execute(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]"
														visible = "[GetScriptedGui('leave_clique_scripted_gui').IsShown(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]"
														enabled = "[GetScriptedGui('leave_clique_scripted_gui').IsValid(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]"
														tooltip = "[GetScriptedGui('leave_clique_scripted_gui').BuildTooltip(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]" 
														
														text = "LEAVE_CLIQUE"
														parentanchor = top
													}
													
													item = {
														button_standard = {
															name = "clique_interaction_button"
											
															onclick = "[GetScriptedGui('clique_interaction_scripted_gui').Execute(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]"
															enabled = "[GetScriptedGui('clique_interaction_scripted_gui').IsValid(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]"
															tooltip = "[GetScriptedGui('clique_interaction_scripted_gui').BuildTooltip(GuiScope.SetRoot(Scope.GetProvince.MakeScope).AddScope('player_viewing_cliques',GetPlayer.MakeScope).End)]" 
											
															text = "[SelectLocalization('(bool)no','',Concatenate(Scope.Var('clique_interaction_name').GetFlagName,'_name'))]"
															parentanchor = top
														}
													}
												}
												expand = {}
											}
										}
										
										hbox = {
											layoutpolicy_horizontal = expanding
											button_group  = {
												onclick = "[GetVariableSystem.Toggle(Concatenate(Scope.Var('clique_name').GetFlagName,'_displayed'))]"
												
												parentanchor = left
								
												button_normal = {
													name = "show_members"
													size = { 20 20 }
													alwaystransparent = no
								
													texture = "gfx/interface/buttons/button_tree_expand.dds"
													framesize = { 36 36 }
													frame = "[Select_int32( Not(GetVariableSystem.Exists(Concatenate(Scope.Var('clique_name').GetFlagName,'_displayed'))), '(int32)1', '(int32)2' )]"
								
													using = tooltip_ws
												}
								
												text_single = {
													text = "Show Members"
													align = nobaseline
													position = { 25 0 }
												}
											}
											expand = {}
										}
										
										dynamicgridbox = {
											name = "clique_members_grid"
											datamodel = "[Scope.GetProvince.MakeScope.GetList('clique_members')]"
											visible = "[GetVariableSystem.Exists(Concatenate(Scope.Var('clique_name').GetFlagName,'_displayed'))]"
											datamodel_wrap = 4
											ignoreinvisible = yes
											flipdirection = yes
											
											item = {
												container = {
													datacontext = "[Scope.GetCharacter]"
		
													portrait_head_cached = {
														
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	########################
	# SPELL MENU BY CASTOX #
	########################
	
	window = {
		visible = "[GetVariableSystem.Exists( 'show_spells')]"
		parentanchor = vcenter|hcenter
		
		icon = {
				position = { 40 20 }
				#920
				size = { 920 100 }
				buttons_window_control = {
						parentanchor = top|right
						blockoverride "button_close"
						{
							onclick = "[GetVariableSystem.Clear( 'show_spells')]"
							onclick = "[GetVariableSystem.Clear( 'show_r_char' )]"
							onclick = "[GetVariableSystem.Clear( 'show_r_land' )]"
							onclick = "[GetVariableSystem.Clear( 'show_r_enemyrealm' )]"
							onclick = "[GetVariableSystem.Clear( 'show_r_prisoners' )]"
							onclick = "[GetVariableSystem.Clear( 'show_r_enemies' )]"
						}
				}
				background = {
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					margin_bottom = 10
					spriteType = Corneredtiled
					spriteborder = { 0 18 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredtiled
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}
				text_single = {
					name = "title_magic"
					text = "Magic"
					parentanchor = top|hcenter
					default_format = "#high"
					using = Font_Size_Big
					using = Font_Type_Flavor

				}
					
			}


			progressbar_standard = {
				size = { 770 45 }
				position = { 115 125 }

				min = 0
				max = 200 # or "[GetPlayer.MakeScope.Var('magic_max_value').GetValue|0]"
				value = "[FixedPointToFloat(GetPlayer.MakeScope.Var('magic_counter').GetValue)]"
				text_single = {
					parentanchor = top|right
					position = { -35 -35 }
					default_format = "#high"
					text = "Power Limit: 200  | Current Power: " # "[Character.MakeScope.Var('hitpoints').GetValue|V1] / [Character.MakeScope.Var('maximum_hitpoints').GetValue|V0]"
					using = Font_Type_Flavor
			
				}
				text_single = {
					parentanchor = top|right
					position = { -2 -35 }
					default_format = "#high"
					text = "[FixedPointToFloat(GetPlayer.MakeScope.Var('magic_counter').GetValue)]"
					
						state = {
							name = a
							next = b
							trigger_on_create = yes
							duration = 0.2
							alpha = 1
						}

						state = {
							name = b
							next = a
							duration = 0.6
							alpha = 0.5
						}
						using = Font_Type_Flavor
				}


				progresstexture = "gfx/interface/progressbars/magicblue.dds"
				noprogresstexture = "gfx/interface/progressbars/magicred.dds"
				
			
				tooltip = "Magic"
				using = tooltip_below
			}

			icon = {
				name = "overlay_frame"
				texture = "gfx/interface/progressbars/magic_frame.dds"
				size = { 798 59 }
				position = { 100 118 }
			}

			size = { 1000 700 }
		
				using = Window_Background
				using = Window_Decoration
				movable = yes
				
			using = Animation_ShowHide_Quick

			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.21

				position = { 0 0 }
				alpha = 1
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 0.21

				position = { -700 1200 }
				alpha = 0
			}
			icon = {
				size = { 375 60 }
				position = { 525 180 }
				texture = "gfx/interface/component_tiles/tile_header_background_01.dds"
				spriteType = Corneredtiled
				spriteborder_top = 3
				spriteborder_bottom = 3
				texture_density = 2

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
					blend_mode = alphamultiply
					alpha = 0.5
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'show_r_char')]"
		
						text = "Characters"
						#position = { 0 0 }
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'show_r_prisoners')]"
		
						text = "Prisoners"
						#position = { 0 0 }
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'show_r_enemyrealm')]"
		
						text = "Enemy Lands"
						#position = { 0 0 }
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'show_r_land')]"
			
						text = "Lands"
						#position = { 0 0 }
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'show_r_enemies')]"
		
						text = "Enemies"
						#position = { 0 0 }
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
			}
			icon = {
				size = { 375 60 }
				position = { 100 180 }
				texture = "gfx/interface/component_tiles/tile_header_background_01.dds"
				spriteType = Corneredtiled
				spriteborder_top = 3
				spriteborder_bottom = 3
				texture_density = 2

				modify_texture = {
					name = "mask"
					texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
					blend_mode = alphamultiply
					alpha = 0.5
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'show_living_magic')]"
		
						text = LIVING_MAGIC
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'show_dead_magic')]"
						text = DEAD_MAGIC
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'show_mixed_magic')]"
						text = MIXED_MAGIC
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'show_other_magic')]"
						text = OTHER_MAGIC
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
				text_single = {
						visible = "[GetVariableSystem.Exists( 'magic_generate')]"
						text = GENERATE_METHOD
						parentanchor = vcenter|hcenter
						default_format = "#high"
						using = Font_Size_Big
						fontsize_min = 14
						using = Font_Type_Flavor
				}
			}
			button = {
				texture = "gfx/interface/hud/info_icon.dds"
				onclick = "[GetVariableSystem.Toggle( 'show_r_char' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_land' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_enemyrealm' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_prisoners' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_enemies' )]"
				size = { 45 50 }
				position = { 480 190 }
			}
			button = {
				texture = "gfx/interface/icons/title_status/icon_title_law.dds"
				onclick = "[GetVariableSystem.Toggle( 'show_r_land' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_char' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_prisoners' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_enemyrealm' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_enemies' )]"
				size = { 50 50 }
				position = { 475 240 }
			}
			button = {
				texture = "gfx/interface/icons/title_status/icon_title_law.dds"
				onclick = "[GetVariableSystem.Toggle( 'show_r_enemyrealm' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_char' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_land' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_prisoners' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_enemies' )]"
				size = { 50 50 }
				position = { 475 390 }
			}
			button = {
				texture = "gfx/interface/hud/info_icon.dds"
				onclick = "[GetVariableSystem.Toggle( 'show_r_prisoners' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_land' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_char' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_enemyrealm' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_enemies' )]"
				size = { 45 50 }
				position = { 480 290 }
			}
			button = {
				texture = "gfx/interface/hud/info_icon.dds"
				onclick = "[GetVariableSystem.Toggle( 'show_r_enemies' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_land' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_char' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_enemyrealm' )]"
				onclick = "[GetVariableSystem.Clear( 'show_r_prisoners' )]"
				size = { 45 50 }
				position = { 480 340 }
			}
			button = {
				visible = "[Not(GetVariableSystem.Exists( 'magic_generate'))]"
				texture = "gfx/interface/hud/icon_up.dds"
				onclick = "[GetScriptedGui('add_tier_magic_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
				size = { 40 40 }
				position = { 480 596 }
			}
			text_single = {
				name = "title_level"
				visible = "[Not(GetVariableSystem.Exists( 'magic_generate'))]"
				text = "[GetPlayer.MakeScope.Var('magic_lvl').GetValue|0]"
				position = { 494 615 }
				default_format = "#high"
				using = Font_Size_Big
				fontsize_min = 16
			}
			button = {
				visible = "[Not(GetVariableSystem.Exists( 'magic_generate'))]"
				texture = "gfx/interface/hud/icon_down.dds"
				onclick = "[GetScriptedGui('sub_tier_magic_scripted_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
				size = { 40 40 }
				position = { 480 636 }
			}
			#Cast Spell
			button_standard = {
				visible = "[Not(GetVariableSystem.Exists( 'magic_generate'))]"
				enabled = "[GetScriptedGui(Concatenate(GetVariableSystem.Get('current_spell'),'_check')).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
				size = { 220 50 }
				position = { 245 612 }
				onclick = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell')).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
				onclick = "[GetVariableSystem.Clear( 'current_spell')]"
				onclick = "[GetVariableSystem.Clear( 'current_spell2' )]"
				tooltip = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"  #Cast /effect!
				text = "Cast Spell"
				default_format = "#high"
				using = Font_Size_Big
				fontsize_min = 16
				using = Font_Type_Flavor
				
			}
			#Spellbox - effects
			scrollbox = { 
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[Not(GetVariableSystem.Exists( 'magic_generate'))]"
				size = { 375 80 }
				position = { 525 595 }
				blockoverride "scrollbox_content"
				{
					vbox = {
						name = "effects_text"
						text_single = {
							visible = "[GetVariableSystem.Exists( 'current_spell')]"
							name = "spell_casting_title"
							autoresize = yes
							position = { 520 0 }
							maximumsize = { 520 -1 }
							minimumsize = { 520 -1 }
							parentanchor = left
							margin_top = -10
							default_format = "#high"
							text = "Currently Casting: [Localize(Concatenate(GetVariableSystem.Get( 'current_spell'),'_name'))]"
							tooltip = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
		
						}
						text_single = {
							visible = "[GetVariableSystem.Exists( 'current_spell')]"
							name = "spell_casting_effect"
							autoresize = yes
							position = { 520 0 }
							maximumsize = { 520 -1 }
							minimumsize = { 520 -1 }
							parentanchor = left
							margin_top = 0
							default_format = "#low"
							text = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
							tooltip = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
							multiline = yes
						}
					}
				}
			}

			#TABS

			#Generate Power Button
			button_standard = {
				size = { 200 30 }
				position = { 110 80 }
				tooltip = GENERATE_POWER
				onclick = "[GetVariableSystem.Clear( 'current_spell')]"
				onclick = "[GetVariableSystem.Clear( 'current_spell2')]"
				onclick = "[GetScriptedGui('clear_prev_menu').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
				onclick = "[GetVariableSystem.Toggle( 'magic_generate')]"
				onclick = "[GetVariableSystem.Clear( 'show_living_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_dead_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_mixed_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_other_magic')]"
				text = GENERATE_POWER_B
				default_format = "#high"
				using = Font_Size_Big
				fontsize_min = 12
				using = Font_Type_Flavor		
			}
			button = {
				visible = "[Not(GetVariableSystem.Exists( 'magic_generate'))]"
				texture = "gfx/interface/icons/spell_menu/living_magic.dds"
				onclick = "[GetVariableSystem.Toggle( 'show_living_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_dead_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_mixed_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_other_magic')]"
				size = { 50 50 }
				position = { 50 180 }
				tooltip = LIVING_MAGIC
			}
			button = {
				visible = "[Not(GetVariableSystem.Exists( 'magic_generate'))]"
				texture = "gfx/interface/icons/spell_menu/dead_magic.dds"
				onclick = "[GetVariableSystem.Toggle( 'show_dead_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_living_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_mixed_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_other_magic')]"
				size = { 50 50 }
				position = { 50 220 }
				tooltip = DEAD_MAGIC
			}
			button = {
				visible = "[Not(GetVariableSystem.Exists( 'magic_generate'))]"
				texture = "gfx/interface/icons/spell_menu/mixed_magic.dds"
				onclick = "[GetVariableSystem.Clear( 'show_dead_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_living_magic')]"
				onclick = "[GetVariableSystem.Toggle( 'show_mixed_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_other_magic')]"
				size = { 50 50 }
				position = { 50 260 }
				tooltip = MIXED_MAGIC
			}
			button = {
				visible = "[Not(GetVariableSystem.Exists( 'magic_generate'))]"
				texture = "gfx/interface/icons/spell_menu/other_magic.dds"
				onclick = "[GetVariableSystem.Clear( 'show_dead_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_living_magic')]"
				onclick = "[GetVariableSystem.Clear( 'show_mixed_magic')]"
				onclick = "[GetVariableSystem.Toggle( 'show_other_magic')]"
				size = { 50 50 }
				position = { 50 300 }
				tooltip = OTHER_MAGIC
			}

			button_standard = {
				visible = "[GetVariableSystem.Exists( 'magic_generate')]"
				size = { 220 50 }
				position = { 525 612 }
				onclick = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell2')).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
				onclick = "[GetVariableSystem.Clear( 'current_spell' )]"
				onclick = "[GetVariableSystem.Clear( 'current_spell2')]"
				tooltip = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell2')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"  #Cast /effect!
				text = GENERATE_POWER
				default_format = "#high"
				using = Font_Size_Big
				fontsize_min = 16
				using = Font_Type_Flavor
				animation_aggressive = {
					size = { 100% 100% }
				}
			}
			#Generate - effects
			scrollbox = { 
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				visible = "[GetVariableSystem.Exists( 'magic_generate')]"
				size = { 375 80 }
				position = { 100 595 }
				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						#maximumsize = { 520 500 }
						#minimumsize = { 520 500 }
						text_single = {
							visible = "[GetVariableSystem.Exists( 'current_spell2')]"
							name = "spell_casting_title"
							autoresize = yes
							maximumsize = { 520 -1 }
							minimumsize = { 520 -1 }
							parentanchor = left|top
							margin_top = -25
							default_format = "#high"
							text = "Generating Power by: [Localize(Concatenate(GetVariableSystem.Get( 'current_spell2'),'_name'))]"
							tooltip = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell2')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
							multiline = yes
						}
						text_single = {
							visible = "[GetVariableSystem.Exists( 'current_spell2')]"
							name = "spell_casting_effect"
							autoresize = yes
							maximumsize = { 520 -1}
							minimumsize = { 520 -1 }
							parentanchor = left|top
							#margin_top = 15
							default_format = "#low"
							text = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell2')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
							tooltip = "[GetScriptedGui(GetVariableSystem.Get( 'current_spell2')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
							multiline = yes
						}
					}
				}
			}
			#Generate Magic
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'magic_generate')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 100 240 }
				
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('generate_magic')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3
						#generate
						item = {
							
							button_standard = {
								name = "gen_button"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								size = { 0 50 }
								onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								onclick = "[GetVariableSystem.Set('current_spell2',Scope.GetFlagName)]"
								button_ignore = none
								visible = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								enabled = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								tooltip = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								using = tooltip_es

								text_single = {
									name = "text"
									parentanchor = vcenter
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_NAME
									position = { 70 0 }
			
								}
								text_single = {
									parentanchor = vcenter|right
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_ADD
									position = { -40 0 }
		
								}
								text_single = { #icon
									parentanchor = vcenter
									text= SPELL_GET_ICON
									default_format = "#SIZE:14"
									position = { 5 0 }
								}

							}

						}
			
					}
				}
			}
			#Spells living
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'show_living_magic')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 100 240 }
				
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('list_living_magic')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3
						#spellbox
						item = {
							
							button_standard = {
								name = "spell_button"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								size = { 0 50 }
								onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								onclick = "[GetVariableSystem.Set( 'current_spell',Scope.GetFlagName)]"
								button_ignore = none
								visible = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								enabled = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								tooltip = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								using = tooltip_es

								text_single = {
									name = "text"
									parentanchor = vcenter
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_NAME
									position = { 70 0 }
			
								}
								text_single = {
									parentanchor = vcenter|right
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_COST
									position = { -40 0 }
		
								}
			
								text_single = { #icon
									parentanchor = vcenter
									text= SPELL_GET_ICON
									default_format = "#SIZE:14"
									position = { 5 0 }
								}

							}

						}
			
					}
				}
			}
			#Spells dead
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'show_dead_magic')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 100 240 }
				
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('list_dead_magic')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3
						#spellbox
						item = {
							
							button_standard = {
								name = "spell_button"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								size = { 0 50 }
								onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								onclick = "[GetVariableSystem.Set( 'current_spell',Scope.GetFlagName)]"
								button_ignore = none
								visible = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								enabled = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								tooltip = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								using = tooltip_es

								text_single = {
									name = "text"
									parentanchor = vcenter
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_NAME
									position = { 70 0 }
			
								}
								text_single = {
									parentanchor = vcenter|right
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_COST
									position = { -40 0 }
		
								}
			
								text_single = { #icon
									parentanchor = vcenter
									text= SPELL_GET_ICON
									default_format = "#SIZE:14"
									position = { 5 0 }
								}

							}

						}
			
					}
				}
			}
			#Spells mixed
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'show_mixed_magic')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 100 240 }
				
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('list_mixed_magic')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3
						#spellbox
						item = {
							
							button_standard = {
								name = "spell_button"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								size = { 0 50 }
								onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								onclick = "[GetVariableSystem.Set( 'current_spell',Scope.GetFlagName)]"
								button_ignore = none
								visible = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								enabled = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								tooltip = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								using = tooltip_es

								text_single = {
									name = "text"
									parentanchor = vcenter
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_NAME
									position = { 70 0 }
			
								}
								text_single = {
									parentanchor = vcenter|right
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_COST
									position = { -40 0 }
		
								}
			
								text_single = { #icon
									parentanchor = vcenter
									text= SPELL_GET_ICON
									default_format = "#SIZE:14"
									position = { 5 0 }
								}

							}


						}
			
					}
				}
			}
			#Spells other
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'show_other_magic')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 100 240 }
				
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('list_other_magic')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3
						#spellbox
						item = {
							
							button_standard = {
								name = "spell_button"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								size = { 0 50 }
								onclick = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
								onclick = "[GetVariableSystem.Set( 'current_spell',Scope.GetFlagName)]"
								button_ignore = none
								visible = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								enabled = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								tooltip = "[GetScriptedGui(Concatenate(Scope.GetFlagName,'_check')).BuildTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								using = tooltip_es

								text_single = {
									name = "text"
									parentanchor = vcenter
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_NAME
									position = { 70 0 }
			
								}
								text_single = {
									parentanchor = vcenter|right
									layoutpolicy_horizontal = expanding
									text = SPELL_GET_COST
									position = { -40 0 }
		
								}
			
								text_single = { #icon
									parentanchor = vcenter
									text= SPELL_GET_ICON
									default_format = "#SIZE:14"
									position = { 5 0 }
								}

							}


						}
			
					}
				}
			}
			#characters
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'show_r_char')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 525 240 }
				
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('character_in_realm')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3

					item = {
						button_standard = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							size = { 0 90 }
							datacontext = "[Scope.GetCharacter]"
							onclick = "[GetScriptedGui('char_select').Execute( GuiScope.SetRoot( Scope.GetCharacter.MakeScope ).End )]"
							onclick = "[GetScriptedGui('char_selected').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Scope.GetCharacter.MakeScope ).End )]"
							onclick = "[GetVariableSystem.Clear( 'current_spell2')]"
							down = "[EqualTo_string(Scope.GetCharacter.MakeScope.Var('is_selected').GetFlagName, 'selected')]"
							button_ignore = none
							using = tooltip_es

							text_single = {
								name = "text"
								layoutpolicy_horizontal = expanding
								text = "[Character.GetNameNoTooltip]"
								position = { 90 0 }
								#parentanchor = vcenter
							}


							portrait_head_small = {
								parentanchor = vcenter
								#parentanchor = hleft
								size = { 50 50 }
								position = {15 15 }
							}

						}


					}
			
					}
				}
			}
			#enemy lords
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'show_r_enemies')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 525 240 }
				
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('enemy_in_realm')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3

					item = {
						
						button_standard = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							size = { 0 90 }
							datacontext = "[Scope.GetCharacter]"
							onclick = "[GetScriptedGui('char_select').Execute( GuiScope.SetRoot( Scope.GetCharacter.MakeScope ).End )]"
							onclick = "[GetScriptedGui('char_selected').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Scope.GetCharacter.MakeScope ).End )]"
							onclick = "[GetVariableSystem.Clear( 'current_spell2')]"
							down = "[EqualTo_string(Scope.GetCharacter.MakeScope.Var('is_selected').GetFlagName, 'selected')]"
							button_ignore = none
							using = tooltip_es

							text_single = {
								name = "text"
								layoutpolicy_horizontal = expanding
								text = "[Character.GetNameNoTooltip]"
								position = { 90 0 }
								#parentanchor = vcenter
							}


							portrait_head_small = {
								parentanchor = vcenter
								#parentanchor = hleft
								size = { 50 50 }
								position = {15 15 }
							}

						}


					}
			
					}
				}
			}

			#prisoners
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'show_r_prisoners')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 525 240 }
				
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('prisoner_in_realm')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3

					item = {
						
						button_standard = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							size = { 0 90 }
							datacontext = "[Scope.GetCharacter]"
							onclick = "[GetScriptedGui('char_select').Execute( GuiScope.SetRoot( Scope.GetCharacter.MakeScope ).End )]"
							onclick = "[GetScriptedGui('char_selected').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Scope.GetCharacter.MakeScope ).End )]"
							onclick = "[GetVariableSystem.Clear( 'current_spell2')]"
							down = "[EqualTo_string(Scope.GetCharacter.MakeScope.Var('is_selected').GetFlagName, 'selected')]"
							button_ignore = none
							using = tooltip_es

							text_single = {
								name = "text"
								layoutpolicy_horizontal = expanding
								text = "[Character.GetNameNoTooltip]"
								position = { 90 0 }
								#parentanchor = vcenter
							}


							portrait_head_small = {
								parentanchor = vcenter
								#parentanchor = hleft
								size = { 50 50 }
								position = {15 15 }
							}

						}


					}
			
					}
				}
			}

			#titles
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'show_r_land')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 525 240 }
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('lands_realm')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3

						item = {
							
							button_standard = {
								name = "vassal_button"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								size = { 0 60 }
								datacontext = "[Scope.GetLandedTitle]"
								onclick = "[GetScriptedGui('title_selected').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Scope.GetLandedTitle.MakeScope ).End )]"
								onclick = "[GetScriptedGui('title_select').Execute( GuiScope.SetRoot( Scope.GetLandedTitle.MakeScope ).End )]"
								onclick = "[GetVariableSystem.Clear( 'current_spell2')]"
								down = "[EqualTo_string(Scope.GetLandedTitle.MakeScope.Var('is_selected').GetFlagName, 'selected')]"
								button_ignore = none
								using = tooltip_es

								coa_title_tiny_crown = {
									datacontext = "[Scope.GetLandedTitle]"
									parentanchor = vcenter
									position = {5 -1 }
								}

								icon = {
									name = "pressed_claim"
									visible = "[GetPlayer.HasPressedClaimOnTitle( Scope.GetLandedTitle.Self )]"
									#visible = "[EqualTo_string(Scope.GetLandedTitle.GetFlagName, GetPlayer.MakeScope.Var(Scope.GetLandedTitle).Scope.GetLandedTitle.GetFlagName)]"
									size = { 24 24 }
									texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
									tooltip = "REVOKE_TITLE_PRESSED_CLAIM"
								}

								hbox = {
									margin_left = 55
									margin_right = 5
									#visible = "[Scope.GetLandedTitle.IsSelected]"
									text_single = {
										name = "text"
										
										layoutpolicy_horizontal = expanding
										text = "[Scope.GetLandedTitle.GetNameNoTooltip]"
									}

									icon = {
										name = "pressed_claim"
										visible = "[GetPlayer.HasPressedClaimOnTitle( Scope.GetLandedTitle.Self )]"
										size = { 24 24 }
										texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
										tooltip = "REVOKE_TITLE_PRESSED_CLAIM"
									}

									icon = {
										name = "unpressed_claim"
										visible = "[GetPlayer.HasUnpressedClaimOnTitle( Scope.GetLandedTitle.Self )]"
										size = { 24 24 }
										texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
										tooltip = "REVOKE_TITLE_UNPRESSED_CLAIM"
									}

									icon = {
										name = "leased_out"
										visible = "[Scope.GetLandedTitle.HasLeasedOutVassal]"
										size = { 36 39 }
										texture = "gfx/interface/icons/icon_holding_church.dds"
										tooltip = "GRANT_TITLE_LEASED_OUT_VASSAL"
									}

									block "extra_title_items" {}
								}


							}
				
						}
					}
				}

			}

			#enemy titles
			scrollbox = {
				visible = "[GetVariableSystem.Exists( 'show_r_enemyrealm')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				size = { 375 350 }
				position = { 525 240 }
				blockoverride "scrollbox_content" {
					vbox_list_interaction_title_selection = {

						datamodel = "[GetPlayer.MakeScope.GetList('enemy_lands')]"
						
						layoutpolicy_horizontal = expanding
						spacing = 3

						item = {
							
							button_standard = {
								name = "vassal_button"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								size = { 0 60 }
								datacontext = "[Scope.GetLandedTitle]"
								onclick = "[GetScriptedGui('title_selected').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('target', Scope.GetLandedTitle.MakeScope ).End )]"
								onclick = "[GetScriptedGui('title_select').Execute( GuiScope.SetRoot( Scope.GetLandedTitle.MakeScope ).End )]"
								onclick = "[GetVariableSystem.Clear( 'current_spell2')]"
								down = "[EqualTo_string(Scope.GetLandedTitle.MakeScope.Var('is_selected').GetFlagName, 'selected')]"
								button_ignore = none
								using = tooltip_es

								coa_title_tiny_crown = {
									datacontext = "[Scope.GetLandedTitle]"
									parentanchor = vcenter
									position = {5 -1 }
								}

								icon = {
									name = "pressed_claim"
									visible = "[GetPlayer.HasPressedClaimOnTitle( Scope.GetLandedTitle.Self )]"
									#visible = "[EqualTo_string(Scope.GetLandedTitle.GetFlagName, GetPlayer.MakeScope.Var(Scope.GetLandedTitle).Scope.GetLandedTitle.GetFlagName)]"
									size = { 24 24 }
									texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
									tooltip = "REVOKE_TITLE_PRESSED_CLAIM"
								}

								hbox = {
									margin_left = 55
									margin_right = 5
									#visible = "[Scope.GetLandedTitle.IsSelected]"
									text_single = {
										name = "text"
										
										layoutpolicy_horizontal = expanding
										text = "[Scope.GetLandedTitle.GetNameNoTooltip]"
									}

									icon = {
										name = "pressed_claim"
										visible = "[GetPlayer.HasPressedClaimOnTitle( Scope.GetLandedTitle.Self )]"
										size = { 24 24 }
										texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
										tooltip = "REVOKE_TITLE_PRESSED_CLAIM"
									}

									icon = {
										name = "unpressed_claim"
										visible = "[GetPlayer.HasUnpressedClaimOnTitle( Scope.GetLandedTitle.Self )]"
										size = { 24 24 }
										texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
										tooltip = "REVOKE_TITLE_UNPRESSED_CLAIM"
									}

									icon = {
										name = "leased_out"
										visible = "[Scope.GetLandedTitle.HasLeasedOutVassal]"
										size = { 36 39 }
										texture = "gfx/interface/icons/icon_holding_church.dds"
										tooltip = "GRANT_TITLE_LEASED_OUT_VASSAL"
									}

									block "extra_title_items" {}
								}


							}
				
						}
					}
				}

			}
		
	}

	icon = {
		visible = "[And(GetPlayer.IsValid, Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD')))]"
		parentanchor = bottom|left
		size = { 462 64 }
		texture = "gfx/interface/skinned/hud_bg_character_bar.dds"
		spritetype = corneredtiled
		spriteborder_left = 70
		spriteborder_right = 240
		texture_density = 2

		state = {
			name = _show
			using = Animation_Curve_Default
			duration = 0.21

			position = { 0 0 }
			alpha = 1
		}

		state = {
			name = _hide
			using = Animation_Curve_Default
			duration = 0.21

			position = { -36 50 }
			alpha = 0
		}
	}

	### BOTTOM LEFT CHARACTER PORTRAIT
	container = {
		datacontext = "[GetPlayer]"
		visible = "[And(GetPlayer.IsValid, Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD')))]"
		parentanchor = bottom|left


		state = {
			name = _show
			using = Animation_Curve_Default
			duration = 0.15

			position = { 0 0 }
			alpha = 1
		}

		state = {
			name = _hide
			using = Animation_Curve_Default
			duration = 0.15

			position = { 0 50 }
			alpha = 0
		}

		portrait_hud = {
			parentanchor = center
			position = { -40 0 }
		}

		icon = {
			texture = "gfx/interface/hud/bottom_left_portrait_fade.dds"
			parentanchor = bottom|left
			color = { 0.12 0.12 0.12 1 }
		}

		icon = {
			texture = "gfx/interface/hud/bottom_left_portrait_fade.dds"
			parentanchor = bottom|left
			color = { 0.15 0.15 0.15 0.3 }
		}
	}

	## Bottom left CoA
	coa_realm_medium_crown = {
		visible = "[And(And(IsDefaultGUIMode, GetPlayer.IsRuler), Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD'))))]"
		parentanchor = bottom|left

		state = {
			name = _show
			using = Animation_Curve_Default
			duration = 0.25

			position = { 0 4 }
			alpha = 1
		}

		state = {
			name = _hide
			using = Animation_Curve_Default
			duration = 0.25

			position = { 0 50 }
			alpha = 0
		}

		blockoverride "coa_button"
		{
			tooltip = "[GetPlayer.GetDefaultRealmFlagTooltipPrimaryTitleClickInfo]"
			onclick = "[DefaultOnCoatOfArmsClick(GetPlayer.GetPrimaryTitle.GetID)]"
		}
	}

	### Lifestyle
	flowcontainer = {
		name = "bottom_left_bar"
		visible = "[And( Not( IsPauseMenuShown ), And(And(IsDefaultGUIMode, GetPlayer.IsValid), Not(GetVariableSystem.Exists( 'hide_bottom_left_HUD')))))]"
		parentanchor = bottom|left
		position = { 66 0 }
		ignoreinvisible = yes
		alwaystransparent = no

		state = {
			name = _show
			using = Animation_Curve_Default
			duration = 0.21

			position = { 66 0 }
			alpha = 1
		}

		state = {
			name = _hide
			using = Animation_Curve_Default
			duration = 0.21

			position = { 30 50 }
			alpha = 0
		}

		spacer = {
			size = { 4 0 }
		}


		flowcontainer = {
			ignoreinvisible = yes
			margin_bottom = 5

			button_normal = {
				name = "lifestyle_button"
				visible = "[GetPlayer.IsAdult]"

				tooltip = "PLAYER_LIFESTYLE_TOOLTIP"
				using = tooltip_ne

				onclick = "[OpenLifestyleView( GetPlayer )]"
				size = { 55 55 }

				icon = {
					texture = "gfx/interface/buttons/button_lifestyles_base.dds"
					size = { 100% 100% }
				}

				icon = {
					name = "progress_frame"
					texture = "gfx/interface/progressbars/action_progress_frame.dds"
					size = { 100% 100% }
					alpha = 0.5
				}

				highlight_icon_lifestyle_focus = {
					name = "tutorial_highlight_lifestyle_HUD_button"
					texture = "[GetPlayer.GetFocus.GetIcon]"
					alwaystransparent = yes
					size = { 100% 100% }

					modify_texture = {
						texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
						blend_mode = alphamultiply
					}
				}

				icon = {
					visible = "[Or(GetPlayer.CanPlayerChangeMyFocus, Not( GetPlayer.GetLifestyle.IsValid ))]"
					size = { 100% 100% }
					alwaystransparent = yes
					texture = "[GetPlayer.GetFocus.GetIcon]"

					modify_texture = {
						texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/colors/gold.dds"
						blend_mode = add

					}

					modify_texture = {
						texture = "gfx/interface/colors/red.dds"
						blend_mode = colordodge
					}

					state = {
						name = a
						next = b
						alpha = 0
						trigger_on_create = yes
						duration = 1.2
						using = Animation_Curve_Default
					}

					state = {
						name = b
						next = a
						alpha = 0.8
						duration = 0.6
						using = Animation_Curve_Default
					}
				}

				progresspie = {
					name = "progress"
					size = { 55 55 }
					texture = "gfx/interface/progressbars/action_progress_thin.dds"
					framesize = { 124 124 }
					frame = 2
					value = "[GetPlayer.GetLifestyleExperienceProgress( GetPlayer.GetLifestyle.Self )]"
				}

				button_round = {
					datacontext = "[GetPlayer]"
					visible = "[And(GreaterThan_int32( Character.GetTotalPerkPoints, '(int32)0' ), Character.IsLocalPlayer)]"
					parentanchor = bottom|right
					position = { 7 3 }
					size = { 28 28 }
					framesize = { 82 82 }
					upframe = 1
					uphoverframe = 1
					uppressedframe = 1
					alwaystransparent = yes

					text_single = {
						parentanchor = center
						datacontext = "[GetPlayer]"
						text = "[Character.GetTotalPerkPoints]"
						default_format = "#high"
						max_width = 180
						align = nobaseline

						# animation_attention = {
						# 	visible = "[GreaterThan_int32( GetPlayer.GetTotalPerkPoints, '(int32)0' )]"
						# }
					}
				}

				animation_sonar = {
					texture = "gfx/interface/component_effects/effect_sonar_ring.dds"
					visible = "[GreaterThan_int32( GetPlayer.GetTotalPerkPoints, '(int32)0' )]"
				}
			}

			button_normal = {
				name = "education_button"
				visible = "[Not(GetPlayer.IsAdult)]"

				tooltip = "PLAYER_EDUCATION_FOCUS_TOOLTIP"
				using = tooltip_ne

				onclick = "[OpenEducationFocusView( GetPlayer )]"
				size = { 55 55 }

				icon = {
					texture = "gfx/interface/buttons/button_lifestyles_base.dds"
					size = { 100% 100% }
				}

				highlight_icon_lifestyle_focus = {
					texture = "[GetPlayer.GetFocus.GetIcon]"
					onclick = "[OpenEducationFocusView( GetPlayer )]"
					size = { 100% 100% }
					gfxtype = togglepushbuttongfx
					effectname = "NoHighlight"
					framesize = { 140 140 }

					modify_texture = {
						texture = "gfx/interface/icons/focuses/hud_icon_mask.dds"
						blend_mode = alphamultiply
					}
				}
			}
		}

		spacer = {
			size = { 6 0 }
		}

		widget = {
			name = "stress_widget"
			size = { 110 55 }

			widget = {
				parentanchor = center
				size = { 180 108 }

				tooltip = "PLAYER_STRESS_TOOLTIP"
				using = tooltip_ne

				widget = {
					name = "progressbar"
					parentanchor = center
					widgetanchor = left|vcenter
					position = { -13 0 }
					size = { 60 20 }

					background = {
						texture = "gfx/interface/colors/white.dds"
						color = { 0.1 0.1 0.1 0.8 }
					}

					icon = {
						visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
						size = { 100% 100% }
						texture = "gfx/interface/colors/white.dds"
						color = { 1 0.1 0.1 0.2 }

						using = Animation_ShowHide_Standard

						state = {
							name = a
							next = b
							trigger_on_create = yes

							using = Animation_Curve_Default
							duration = 0.8
							alpha = 0
						}

						state = {
							name = b
							next = a

							using = Animation_Curve_Default
							duration = 1.5
							alpha = 1
						}
					}

					hbox = {
						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							layoutstretchfactor_horizontal = "[GetProgressBarValueMaxScaled( GetPlayer.GetStressProgress, '(float)100', '(int32)60' )]"

							progressbar_hud_stress = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetStressLevel, '(int32)3')]"
								size = { 100% 100% }

								using = Animation_ShowHide_Standard

								blockoverride "bar_color"
								{
									texture = "gfx/interface/colors/red.dds"
								}

								blockoverride "bar_color_flow"
								{
									texture = "gfx/interface/colors/gold.dds"
									alpha = 0.7
								}
							}

							progressbar_hud_stress = {
								visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
								size = { 100% 100% }

								using = Animation_ShowHide_Standard

								blockoverride "bar_color"
								{
									texture = "gfx/interface/colors/orange.dds"
								}

								blockoverride "bar_color_flow"
								{
									texture = "gfx/interface/colors/white.dds"
									alpha = 0.3
								}
							}

							progressbar_hud_stress = {
								visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)1')]"
								size = { 100% 100% }

								using = Animation_ShowHide_Standard

								blockoverride "bar_color"
								{
									texture = "gfx/interface/colors/gold_darker.dds"
								}

								blockoverride "bar_color_flow"
								{
									texture = "gfx/interface/colors/white.dds"
									alpha = 0.3
								}
							}

							progressbar_hud_stress = {
								visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)0')]"
								size = { 100% 100% }

								using = Animation_ShowHide_Standard

								blockoverride "bar_color"
								{
									texture = "gfx/interface/colors/blue.dds"
								}

								blockoverride "bar_color_flow"
								{
									texture = "gfx/interface/colors/white.dds"
									alpha = 0.3
								}
							}
						}

						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							layoutstretchfactor_horizontal = "[GetProgressBarValueMaxOtherScaled( GetPlayer.GetStressProgress, '(float)100', '(int32)60' )]"
						}
					}
				}

				widget = {
					size = { 100% 100% }

					progressbar_hud_stress_glow = {
						texture = "gfx/interface/hud/hud_stress_glow_red.dds"

						blockoverride "animation_trigger_1"
						{
							name = "stress_level_increase"
						}

						blockoverride "animation_trigger_2"
						{
							name = "stress_increase"
						}
					}

					progressbar_hud_stress_glow = {
						texture = "gfx/interface/hud/hud_stress_glow_blue.dds"

						blockoverride "animation_trigger_1" {
							name = "stress_level_decrease"
						}

						blockoverride "animation_trigger_2"
						{
							name = "stress_decrease"
						}
					}

					progressbar_hud_stress_glow = {
						visible = "[EqualTo_int32(GetPlayer.GetStressLevel, '(int32)3')]"
						texture = "gfx/interface/hud/hud_stress_glow_red.dds"

						blockoverride "animation_trigger_1" {
							name = "lvl3_fire"
							trigger_on_create = yes
						}

						blockoverride "animation_trigger_2" {}
						blockoverride "lvl_3" {}
					}

					icon = {
						parentanchor = center
						position = { -30 0 }
						size = { 30 30 }
						texture = "gfx/interface/colors/white.dds"
						using = Color_Red


						modify_texture = {
							name = "mask_1"
							texture = "gfx/interface/component_masks/mask_glow.dds"
							blend_mode = alphamultiply
							rotate_uv = 1
						}

						modify_texture = {
							name = "mask_2"
							texture = "gfx/interface/component_masks/mask_glow.dds"
							blend_mode = alphamultiply
							rotate_uv = -1
						}

						modify_texture = {
							name = "mask_3"
							texture = "gfx/interface/component_masks/mask_clouds.dds"
							blend_mode = alphamultiply
							alpha = 0.1
						}

						modify_texture = {
							name = "mask_4"
							texture = "gfx/interface/component_masks/mask_circle.dds"
							blend_mode = mask
						}

						modify_texture = {
							name = "mask_3"
							texture = "gfx/interface/colors/gold.dds"
							blend_mode = add
						}

						state = {
							name = "stress_level_increase"
							next = b

							using = Animation_Curve_Default
							scale = 1
							alpha = 0
						}

						state = {
							name = b
							next = c

							duration = 0.6
							bezier = { 0.5 0 1 0.5 }

							scale = 5
							alpha = 0.7
						}

						state = {
							name = c
							duration = 0.3
							alpha = 0
							scale = 6
						}

						state = {
							name = rotate_a
							next = rotate_b
							trigger_on_create = yes

							modify_texture = {
								name = "mask_1"
								rotate_uv = 1
							}
						}

						state = {
							name = rotate_a
							next = rotate_b

							duration = 1

							modify_texture = {
								name = "mask_1"
								rotate_uv = 180
							}
						}

						state = {
							name = rotate_a_2
							next = rotate_b_2
							trigger_on_create = yes

							modify_texture = {
								name = "mask_2"
								rotate_uv = -1
							}
						}

						state = {
							name = rotate_a_2
							next = rotate_b_2

							duration = 1

							modify_texture = {
								name = "mask_2"
								rotate_uv = -180
							}
						}

						state = {
							name = rotate_a_3
							next = rotate_b_3
							trigger_on_create = yes

							modify_texture = {
								name = "mask_3"
								rotate_uv = 0
								alpha = 0.1
							}
						}

						state = {
							name = rotate_a_3
							next = rotate_b_3

							duration = 1

							modify_texture = {
								name = "mask_3"
								rotate_uv = 40
								alpha = 0.8
							}
						}
					}

					icon = {
						size = { 100% 100% }
						texture = "gfx/interface/skinned/hud_stress_bg.dds"

						icon = {
							parentanchor = vcenter
							position = { 41 0 }
							size = { 35 35 }

							texture = "gfx/interface/icons/stress/icon_stress_level.dds"
							framesize = { 70 70 }
							frame = "[IntToFrameIndex( GetPlayer.GetStressLevel )]"

							modify_texture = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
								name = "lvl3_glow"
								texture = "gfx/interface/colors/gold.dds"
								blend_mode = colordodge
								alpha = 0
							}

							modify_texture = {
								name = "lvl_increase"
								texture = "gfx/interface/colors/gold.dds"
								blend_mode = colordodge
								alpha = 0
							}

							state = {
								name = a
								next = b
								duration = 0.6
								trigger_on_create = yes
								using = Animation_Curve_Default

								modify_texture = {
									name = "lvl3_glow"
									alpha = 0.3
								}
							}

							state = {
								name = b
								next = a
								duration = 1.5
								using = Animation_Curve_Default

								modify_texture = {
									name = "lvl3_glow"
									alpha = 0
								}
							}

							state = {
								name = "stress_level_increase"
								next = "stress_level_increase_2"

								modify_texture = {
									name = "lvl_increase"
									alpha = 0
								}
							}

							state = {
								name = "stress_level_increase_2"
								next = "stress_level_increase_3"
								duration = 0.4
								bezier = { 0.5 0 1 0.5 }

								modify_texture = {
									name = "lvl_increase"
									alpha = 0.7
								}
							}

							state = {
								name = "stress_level_increase_3"
								duration = 0.5
								bezier = { 0 0.5 0.5 1 }

								modify_texture = {
									name = "lvl_increase"
									alpha = 0
								}
							}
						}
					}
				}
			}
		}

		spacer = {
			size = { 9 0 }
		}

		flowcontainer = {
			parentanchor = bottom

			button_hud_character_bar = {
				name = "house_button"
				datacontext = "[GetPlayer.GetHouse]"
				onclick = "[DefaultOnHouseCoatOfArmsClick(DynastyHouse.GetID)]"
				parentanchor = bottom

				using = tooltip_ne

				tooltipwidget = {
					using = dynasty_house_tooltip
				}

				coa_house_tiny = {
					parentanchor = center
					position = { 0 7 }
					using = tooltip_ne
					scale = 0.92

					blockoverride "coa_button"
					{
						alwaystransparent = yes
					}

					blockoverride "coa_tooltip"
					{}
				}
			}

			button_hud_character_bar = {
				name = "faith_button"
				datacontext = "[GetPlayer.GetFaith]"
				parentanchor = bottom

				onclick = "[DefaultOnFaithClick(GetPlayer.GetFaith.GetID)]"

				tooltipwidget = {
					faith_tooltip_click = {}
				}

				highlight_icon = {
					texture = "[Faith.GetIcon]"
					size = { 40 40 }
					position = { 0 4 }
					parentanchor = center

					glow = {
						color = { 0 0 0 0.8 }
						glow_radius = 3
						using = Glow_Standard
					}
				}
			}

			button_hud_character_bar = {
				name = "innovations_button"
				datacontext = "[GetPlayer.GetCulture]"
				parentanchor = bottom
				onclick = "[DefaultOnCultureClick(Culture.GetID)]"

				tooltipwidget = {
					culture_tooltip_click = {}
				}

				highlight_icon = {
					parentanchor = center
					position = { 0 5}
					size = { 40 40 }
					texture = "gfx/interface/icons/icon_culture.dds"

					glow = {
						color = { 0 0 0 0.8 }
						glow_radius = 3
						using = Glow_Standard
					}
				}
			}
		}

		widget_stress_sounds = {}
	}

	######################################################
	################ MAPMODES AND WARS ###################
	######################################################

	map_modes_debug = {
		visible = "[And( InDebugMode, And(IsDefaultGUIMode, Not(IsRightWindowOpen)))]"
		parentanchor = bottom|right
		position = { 0 -220 }

		filter_mouse = all
		alwaystransparent = no
		scale = 0.9
	}

	### WARS SCHEMES AND MAPMODES
	flowcontainer = {
		visible = "[And(IsDefaultGUIMode, Not(IsRightWindowOpen))]"
		parentanchor = bottom|right
		widgetanchor = top|right
		position = { 0 -155 }
		alwaystransparent = yes
		ignoreinvisible = yes
		filter_mouse = all
		allow_outside = yes
		spacing = 30

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		## Wars
		flowcontainer = {
			name = "wars_and_schemes"
			ignoreinvisible = yes
			margin_top = 35

			flowcontainer = {
				name = "player_schemes"
				datamodel = "[InGameBottomBar.GetSchemes]"
				parentanchor = vcenter
				spacing = 5
				margin = { 5 0 }

				item = {
					button_normal = {
						name = "tutorial_highlight_lifestyle_HUD_button"
						onclick = "[BottomBarSchemeItem.OnClick]"
						datacontext = "[BottomBarSchemeItem.GetScheme]"
						tooltip = "BOTTOMBAR_SCHEME_TOOLTIP"
						size = { 60 60 }

						icon = {
							texture = "gfx/interface/buttons/button_lifestyles_base.dds"
							size = { 100% 100% }
						}

						icon = {
							name = "progress_frame"
							texture = "gfx/interface/progressbars/action_progress_frame.dds"
							size = { 100% 100% }
							parentanchor = center
							alpha = 0.5
						}

						progresspie = {
							name = "progress"
							size = { 60 60 }
							texture = "gfx/interface/progressbars/action_progress_thin.dds"
							framesize = { 124 124 }
							frame = 2
							widgetanchor = top|hcenter
							parentanchor = top|hcenter
							value = "[Scheme.GetProgressBar]"
						}

						highlight_icon = {
							visible = "[Not(Scheme.GetSchemeType.IsHostile)]"
							texture = "gfx/interface/icons/schemes/icon_scheme_personal.dds"
							alwaystransparent = yes
							size = { 45 45 }
							parentanchor = center
						}

						highlight_icon = {
							visible = "[Scheme.GetSchemeType.IsHostile]"
							texture = "gfx/interface/icons/icon_scheme.dds"
							alwaystransparent = yes
							size = { 45 45 }
							parentanchor = center
						}
					}
				}
			}

			button_frontend = {
				name = "tutorial_highlight_raise_troops"
				size = { 200 64 }
				datacontext = "[GetPlayer]"
				visible = "[And( Character.IsAtWar, Not(Character.HasRaisedRegiments)))]"
				parentanchor = vcenter

				enabled = "[PlayerCanRaiseAnyRallyPoint]"
				onclick = "[PlayerRaiseAllRegiments]"
				clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_raise_army"

				tooltip = "[GetPlayerRaiseAllTooltip]"
				using = tooltip_ne

				text = "RAISE_ALL"
				margin_left = 45

				icon = {
					texture = "gfx/interface/icons/icon_banner.dds"
					size = { 40 40 }
					alwaystransparent = yes
					parentanchor = left|vcenter
					position = { 5 0 }
				}
			}

			button_frontend = {
				size = { 200 64 }
				datacontext = "[GetPlayer]"
				visible = "[PlayerShouldDisbandAll]"
				parentanchor = vcenter

				onclick = "[PlayerDisbandAll]"
				enabled = "[PlayerCanDisbandAll]"
				clicksound = "event:/SFX/UI/Unit/Army/sfx_ui_unit_army_disband"

				tooltip = "[GetDisbandAllTooltip]"
				using = tooltip_ne

				text = "DISBAND_ALL"
				margin_left = 45

				icon = {
					texture = "gfx/interface/icons/icon_banner.dds"
					size = { 40 40 }
					alwaystransparent = yes
					parentanchor = left|vcenter
					position = { 5 0 }
				}
			}

			flowcontainer = {
				name = "wars"
				parentanchor = vcenter

				flowcontainer = {
					name = "great_holy_wars"
					parentanchor = vcenter
					ignoreinvisible = yes

					flowcontainer = {
						datamodel = "[GetPlayer.GetFaith.GetDefensiveGreatHolyWars]"
						ignoreinvisible = yes
						parentanchor = vcenter

						item = {
							button_ghw_banner = {
								name = "defensive_ghw"
								parentanchor = vcenter

								blockoverride "ghw_tooltip"
								{
									tooltip = "GHW_OPEN_TOOLTIP_DEFENDER"
									using = tooltip_ne
								}
							}
						}
					}

					button_ghw_banner = {
						name = "player_faith_ghw"
						datacontext = "[GetPlayer.GetFaith.GetGreatHolyWar]"
						visible = "[GetPlayer.GetFaith.HasOffensiveGreatHolyWar]"
						parentanchor = vcenter

						blockoverride "ghw_tooltip"
						{
							tooltip = "GHW_OPEN_TOOLTIP_ATTACKER"
							using = tooltip_ne
						}
					}
				}

				flowcontainer = {
					name = "raids_on_me"
					datamodel = "[GetPlayer.GetHostileRaiders]"
					parentanchor = vcenter

					item = {
						button_raid_banner = {
							parentanchor = vcenter
							tooltip = "RAID_ON_ME_TOOLTIP"
						}
					}
				}

				flowcontainer = {
					name = "raids_by_me"
					datamodel = "[GetPlayer.GetRaidTargets]"
					parentanchor = vcenter

					item = {
						button_raid_banner = {
							parentanchor = vcenter
							tooltip = "RAID_BY_ME_TOOLTIP"
						}
					}
				}

				flowcontainer = {
					name = "regular_wars"
					datamodel = "[InGameBottomBar.GetWarItems]"
					ignoreinvisible = yes

					item = {
						button_war_banner = {}
					}
				}
			}
		}

		## Map Modes
		map_modes = {
			filter_mouse = all
			alwaystransparent = no
		}
	}
}

######################################################
############# MESSAGES AND NOTIFICATIONS #############
######################################################

### Message Feed
notifications_message_feed = {
	position = { -10 -135 }
	layer = bottom
}

### Toasts
notifications_toasts = {
	widgetanchor = center
	parentanchor = top|hcenter
	position = { 0 165 }
	layer = middle
}

### Suggestions / Current Situation
notifications_suggestions = {
	layer = middle

	attachto = {
		widgetid = "suggestions_placer"
		inherit_visibility = hidden
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################


types HUD
{
	type Animation_HUD_daily_tick = widget {
		using = Animation_ShowHide_Quick

		icon = {
			size = { 100% 100% }
			texture = "gfx/interface/colors/white.dds"
			shaderfile = "gfx/FX/repeat_texture.shader"
			color = { 0.63 0.59 0.68 1 }

			block "alpha"
			{
				alpha = 0.5
			}

			modify_texture = {
				name = "pattern"
				texture = "gfx/interface/component_masks/mask_clouds.dds"
				spriteType = corneredtiled
				blend_mode = alphamultiply
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
				blend_mode = alphamultiply
			}

			state = {
				name = a
				next = b
				duration = 0
				trigger_on_create = yes

				modify_texture = {
					name = "pattern"
					translate_uv = { 0 0 }
				}
			}

			state = {
				name = b
				next = a
				block "duration"
				{
					duration = 2
				}

				modify_texture = {
					name = "pattern"
					translate_uv = { -1 0 }
				}
			}
		}
	}

	type progressbar_hud_stress_glow = icon {
		size = { 100% 100% }

		block "lvl_3"
		{
			alpha = 0
		}

		shaderfile = "gfx/FX/repeat_texture.shader"

		modify_texture = {
			name = "clouds"
			texture = "gfx/interface/component_masks/mask_clouds.dds"
			blend_mode = alphamultiply
			spriteType = corneredtiled
			texture_density = 3
		}

		state = {
			name = mask_a
			next = mask_b
			trigger_on_create = yes

			modify_texture = {
				name = "clouds"
				translate_uv = { 0 -1 }
			}
		}

		state = {
			name = mask_b
			next = mask_a
			duration = 8

			modify_texture = {
				name = "clouds"
				translate_uv = { 0 1 }
			}
		}

		state = {
			block "animation_trigger_1"
			{
				name = "stress_level_increase"
			}
			next = "fade_out"

			duration = 0.2
			delay = 0.3
			bezier = { 0.5 0 1 0.5 }
			alpha = 1
		}

		block "lvl_3" {
			state = {
				block "animation_trigger_2"
				{
					name = "stress_increase"
				}
				next = "fade_out"

				duration = 0.2
				delay = 0.3
				bezier = { 0.5 0 1 0.5 }
				alpha = 1
			}

			state = {
				name = "fade_out"

				duration = 1.5
				bezier = { 0 0.5 0.5 1 }
				alpha = 0
			}
		}
	}

	type progressbar_hud_stress = icon {
		shaderfile = "gfx/FX/repeat_texture.shader"
		alpha = 0.8

		block "bar_color"
		{
			# texture = "gfx/interface/colors/red.dds"
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_rough_edges.dds"
			spriteType = Corneredtiled
			spriteborder = { 20 20 }
			blend_mode = alphamultiply
			texture_density = 5
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
			blend_mode = alphamultiply
			alpha = 0.3
		}

		modify_texture = {
			texture = "gfx/interface/component_masks/mask_scratches.dds"
			blend_mode = alphamultiply
			spriteType = corneredtiled
			alpha = 0.3
			texture_density = 3
		}

		modify_texture = {
			name = "flash"
			texture = "gfx/interface/colors/white.dds"
			blend_mode = colordodge
			alpha = 0
		}

		modify_texture = {
			visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetStressLevel, '(int32)2')]"
			name = "lvl3_glow"
			texture = "gfx/interface/colors/gold.dds"
			blend_mode = colordodge
			alpha = 0
		}

		modify_texture = {
			name = "clouds"
			texture = "gfx/interface/component_masks/mask_clouds_solid.dds"
			blend_mode = mask
			spriteType = corneredtiled
			texture_density = 1
		}

		modify_texture = {
			block "bar_color_flow"
			{
				# texture = "gfx/interface/colors/yellow.dds"
				alpha = 0.3
			}
			blend_mode = colordodge
		}

		state = {
			name = "lvl3_glow_a"
			next = "lvl3_glow_b"
			duration = 0.6
			trigger_on_create = yes
			using = Animation_Curve_Default

			modify_texture = {
				name = "lvl3_glow"
				alpha = 0.5
			}
		}

		state = {
			name = "lvl3_glow_b"
			next = "lvl3_glow_a"
			duration = 1.5
			using = Animation_Curve_Default

			modify_texture = {
				name = "lvl3_glow"
				alpha = 0
			}
		}

		state = {
			name = "stress_level_increase"
			next = "fade_out"

			duration = 0.1
			bezier = { 0.5 0 1 0.5 }

			modify_texture = {
				name = "flash"
				alpha = 0.6
			}
		}

		state = {
			name = "stress_increase"
			next = "fade_out"

			duration = 0.1
			bezier = { 0.5 0 1 0.5 }

			modify_texture = {
				name = "flash"
				alpha = 0.6
			}
		}

		state = {
			name = "fade_out"

			duration = 0.8
			bezier = { 0 0.5 0.5 1 }


			modify_texture = {
				name = "flash"
				alpha = 0
			}
		}

		state = {
			name = a
			next = b
			trigger_on_create = yes

			modify_texture = {
				name = "clouds"
				translate_uv = { 1 0 }
			}
		}

		state = {
			name = b
			next = a
			duration = 15

			modify_texture = {
				name = "clouds"
				translate_uv = { -1 0 }
			}
		}
	}

	type button_war_banner = button_normal {
		size = { 78 82 }
		onclick = "[WarItem.OnClick]"
		tooltip = "[WarItem.GetTooltip]"
		using = tooltip_ne

		animation_sonar = {
			visible = "[WarItem.CanEnforceVictory]"
			texture = "gfx/interface/component_masks/mask_glow.dds"
			using = Color_Orange
		}

		icon = {
			name = "enforce_victory_glow"
			visible = "[WarItem.CanEnforceVictory]"
			parentanchor = center
			size = { 100% 100% }
			scale = 1.2
			texture = "gfx/interface/icons/war_status/war_won_glow.dds"

			state = {
				trigger_on_create = yes
				name = a
				next = b

				using = Animation_Curve_Default
				duration = 1
				alpha = 1
			}

			state = {
				name = b
				next = a

				using = Animation_Curve_Default
				duration = 1.6
				alpha = 0.2
			}
		}

		button = {
			name = "enforce_victory_icon"
			visible = "[WarItem.CanEnforceVictory]"
			parentanchor = hcenter
			position = { 0 -27 }
			texture = "gfx/interface/icons/war_status/war_won_icon.dds"

			modify_texture = {
				name = "shimmer_war_banner"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 1 1 }
				alpha = 0.8
			}

			state = {
				name = shimmer
				next = pause
				trigger_when = "[WarItem.CanEnforceVictory]"
				delay = 0.5
				bezier = { 0 0.9 1 0.4 }

				modify_texture = {
					name = "shimmer_war_banner"
					translate_uv = { 1 0.8 }
					alpha = 0.5
				}
			}

			state = {
				name = pause
				duration = 0.8

				modify_texture = {
					name = "shimmer_war_banner"
					translate_uv = { -1 -1 }
					alpha = 0.5
				}
			}
		}

		highlight_icon = {
			name = "war_icon"
			visible = "[WarItem.IsPlayerParticipant]"
			parentanchor = center
			size = { 100% 100% }
			texture = "gfx/interface/icons/war_status/war_icon.dds"

			modify_texture = {
				name = "shimmer_war_banner"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 1 1 }
			}

			state = {
				name = shimmer
				next = pause
				trigger_when = "[WarItem.CanEnforceVictory]"
				delay = 0.5
				bezier = { 0 0.9 1 0.4 }

				modify_texture = {
					name = "shimmer_war_banner"
					translate_uv = { 1 0.5 }
					alpha = 0.5
				}
			}

			state = {
				name = pause
				duration = 0.8

				modify_texture = {
					name = "shimmer_war_banner"
					translate_uv = { -1 -1 }
					alpha = 0.5
				}
			}
		}

		highlight_icon = {
			name = "war_icon_liege"
			visible = "[Not(WarItem.IsPlayerParticipant)]"
			parentanchor = center
			size = { 100% 100% }
			texture = "gfx/interface/icons/war_status/war_icon_liege.dds"
		}

		coa_realm_small = {
			name = "enemy_realm"
			datacontext = "[WarItem.GetWar.GetPrimaryPlayerEnemy]"
			parentanchor = hcenter
			scale = 0.9
			position = { 0 12 }
			tooltip_enabled = no
			alwaystransparent = yes
		}

		text_single = {
			name = "warscore"
			parentanchor = bottom|hcenter
			position = { 0 -7 }
			size = { 50 10 }
			align = center
			text = "[WarItem.GetWarScoreFraction|0%=+]"
		}

		widget = {
			visible = "[WarItem.CanEnforceVictory]"

			state = {
				name = _show

				start_sound = {
					soundeffect = "event:/SFX/UI/War/sfx_ui_war_enforce_demand"
					soundparam = {
						name = StateChange
						value = 1.5
					}
				}
			}
		}
	}

	type button_ghw_banner = button_normal {
		size = { 78 82 }
		onclick = "[OpenGreatHolyWarWindow(GreatHolyWar.GetID)]"

		block "ghw_tooltip"
		{
			tooltip = "#D no tooltip :(#!"
		}

		button = {
			name = "holy_war_icon_started"
			visible = "[GreatHolyWar.HasWarStarted]"
			onclick = "[OpenGreatHolyWarWindow(GreatHolyWar.GetID)]"
			parentanchor = center
			size = { 100% 100% }
			texture = "gfx/interface/icons/war_status/holy_war_icon_started.dds"
		}

		button = {
			name = "holy_war_icon_prep"
			visible = "[Not(GreatHolyWar.HasWarStarted)]"
			onclick = "[OpenGreatHolyWarWindow(GreatHolyWar.GetID)]"
			parentanchor = center
			size = { 100% 100% }
			texture = "gfx/interface/icons/war_status/holy_war_icon_prep.dds"
		}

		button = {
			name = "faith_icon"
			datacontext = "[GreatHolyWar.GetFaith]"
			onclick = "[OpenGreatHolyWarWindow(GreatHolyWar.GetID)]"
			parentanchor = center
			position = { 1 -3 }
			size = { 35 35 }
			texture = "[Faith.GetIcon]"
		}
	}

	type button_raid_banner = button_normal {
		size = { 78 82 }
		onclick = "[DefaultOnCharacterClick(Character.GetID)]"
		using = tooltip_ne

		highlight_icon = {
			texture = "gfx/interface/icons/war_status/raid_icon.dds"
			size = { 100% 100% }
			parentanchor = center
		}

		coa_realm_small = {
			name = "enemy_realm"
			parentanchor = hcenter
			scale = 0.9
			position = { 0 12 }
			tooltip_enabled = no
			alwaystransparent = yes
		}

		text_single = {
			name = "time_left"
			parentanchor = bottom|hcenter
			position = { 0 -7 }
			size = { 50 10 }
			align = center
			text = "[GetPlayer.GetRaidHostilityEnd( Character.Self ).GetTimeDiffFromNow]"

		}
	}

	type button_hud_character_bar = button_normal {
		effectname = "NoHighlight"

		framesize = { 102 104}
		size = { 51 52 }
		texture = "gfx/interface/skinned/button_hud_character_bar.dds"
		using = tooltip_ne


		state = {
			name = _show
			frame = 1
			position_y = 0

			using = Animation_Curve_Default
			duration = 0.25
		}

		state = {
			name = _mouse_hierarchy_enter
			frame = 2

			using = Animation_Curve_Default
			duration = 0.1
		}

		state = {
			name = _mouse_leave
			frame = 1

			using = Animation_Curve_Default
			duration = 0.25
		}

		state = {
			name = _mouse_press
			frame = 3
			position_y = 3
		}

		state = {
			name = _mouse_release
			frame = 2
			position_y = 0

			using = Animation_Curve_Default
			duration = 0.25
		}
	}

	type button_hud_main_tab = widget {
		size = { 45 45 }
		using = tooltip_ws
		tooltip_offset = { 35 0 }

		button_normal = {
			parentanchor = center
			size = { 45 45 }

			scale = 1

			block "maintab_button" {}

			modify_texture = {
				name = "glow"
				texture = "gfx/interface/component_effects/effect_shimmer.dds"
				blend_mode = colordodge
				translate_uv = { 1 0 }
				alpha = 0
			}

			state = {
				name = _mouse_enter
				duration = 0.03
				scale = 1.2
				position_x = -3

				using = Animation_Curve_Default

				modify_texture = {
					name = "glow"
					translate_uv = { 0 0 }
					alpha = 0.4
				}
			}

			state = {
				name = _mouse_leave
				duration = 0.1
				scale = 1
				position_x = 0

				using = Animation_Curve_Default

				modify_texture = {
					name = "glow"
					translate_uv = { 1 0 }
					alpha = 0
				}
			}

			state = {
				name = _mouse_press

				using = Animation_Curve_Default
			}

			state = {
				name = _mouse_release
				duration = 0.15

				using = Animation_Curve_Default
			}
		}
	}

	type hotkeys_HUD = widget {
		# Mapmodes
		button_normal = {
			onclick = "[SetMapMode('players')]"
			shortcut = "map_mode_7"
			enabled = "[Or(GameHasMultiplePlayers, InDebugMode)]"
		}

		button_normal = {
			onclick = "[SetMapMode('dejure_duchies')]"
			shortcut = "map_mode_9"
			shortcut = "mapmode_duchies_secondary"
		}

		button_normal = {
			onclick = "[SetMapMode('dejure_kingdoms')]"
			shortcut = "map_mode_10"
			shortcut = "mapmode_kingdoms_secondary"

		}

		button_normal = {
			onclick = "[SetMapMode('dejure_empires')]"
			shortcut = "map_mode_11"
			shortcut = "mapmode_empires_secondary"
		}

		button_normal = {
			onclick = "[SetMapMode('religions')]"
			shortcut = "map_mode_3"
			shortcut = "mapmode_faith_secondary"
		}

		button_normal = {
			onclick = "[SetMapMode('cultures')]"
			shortcut = "map_mode_2"
			shortcut = "mapmode_culture_secondary"
		}

		button_normal = {
			onclick = "[SetMapMode('houses')]"
			shortcut = "map_mode_4"
			shortcut = "mapmode_house_secondary"
		}

		button_normal = {
			onclick = "[SetMapMode('realms')]"
			onclick = "[ClearExploringRealms]"
			shortcut = "map_mode_1"
		}

		button_normal = {
			onclick = "[SetMapMode('government')]"
			shortcut = "map_mode_5"
		}

		button_normal = {
			onclick = "[SetMapMode('dejure_counties')]"
			shortcut = "map_mode_6"
		}

		button_normal = {
			onclick = "[SetMapMode('simple_terrain')]"
			shortcut = "map_mode_12"
		}

		button_normal = {
			onclick = "[SetMapMode('county_development')]"
			shortcut = "map_mode_13"
		}

		button_normal = {
			name = "find_title_shortcut"
			onclick = "[ToggleGameView( 'find_title' )]"
			onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
			shortcut = "find_title_shortcut"
		}

		# 0 size button for shortcut to work
		button_normal = {
			name = "find_character_shortcut"
			onclick = "[ToggleGameView( 'character_finder' )]"
			onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
			shortcut = "character_finder"
		}

		# 0 size button for shortcut to work
		button_normal = {
			name = "encyclopedia_shortcut"
			onclick = "[ToggleEncyclopedia]"
			onclick = "[GetVariableSystem.Clear( 'extra_buttons_expand' )]"
			shortcut = "encyclopedia"
		}
	}

	type button_pause_hud = button_round {
		size = { 33 33 }

		enabled = "[Not(IsGameOver)]"
		onclick = "[OnPause]"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"

		button_play = {
			visible = "[IsGamePaused]"
			size = { 35 35 }

			tooltip = "[SelectLocalization( IsGameOver, 'UNPAUSE_GAME_OVER', 'UNPAUSE_GAME')]"
			using = tooltip_ne
			alwaystransparent = yes
			parentanchor = center
		}

		button_pause = {
			visible = "[Not(IsGamePaused)]"
			size = { 35 35 }

			tooltip = "PAUSE_GAME"
			using = tooltip_ne
			alwaystransparent = yes
			parentanchor = center
		}
	}

	type container_resource_balance = container {
		text_single = {
			name = "balance_pos"
			visible = "[GreaterThanOrEqualTo_CFixedPoint(PlayerValueItem.GetBalance, '(CFixedPoint)0')]"
			text = "[PlayerValueItem.GetBalance|1=]"
			max_width = 110

			default_format = "#low"
		}

		text_single = {
			name = "balance_neg"
			visible = "[LessThan_CFixedPoint(PlayerValueItem.GetBalance, '(CFixedPoint)0')]"
			text = "[PlayerValueItem.GetBalance|1=]"
			max_width = 110

			default_format = "#N"
		}
	}

	type container_saving_indicator = container {
		visible = yes

		background = {
			name = "bg"
			texture = "gfx/interface/tooltips/tooltip_bg.dds"
			spriteType = Corneredtiled
			gfxtype = icongfx
			spriteborder = { 2 2 }
			shaderfile = "gfx/FX/pdxgui_default.shader"

		}

		background = {
			name = "frame"
			texture = "gfx/interface/tooltips/tooltip_frame.dds"
			gfxtype = icongfx
			spriteType = Corneredtiled
			spriteborder = { 20 20 }
			shaderfile = "gfx/FX/pdxgui_default.shader"


			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_window.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}

		flowcontainer = {
			spacing = 15
			margin = { 20 15 }

			progressbar = {
				size = { 44 44 }
				gfxtype = framedprogressbargfx
				texture = "gfx/interface/frontend/loading_progress.dds"
				framesize = { 88 88 }
				loopinterval = 2.0
				max = 0
			}

			text_single = {
				parentanchor = vcenter
				align = nobaseline
				using = Font_Size_Medium

				block "csi_text"
				{
					text = "AUTOSAVE_IN_PROGRESS"
				}
			}
		}
	}


}
