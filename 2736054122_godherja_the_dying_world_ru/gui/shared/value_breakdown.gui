types Breakdowns
{
	## List of values tooltip
	type widget_value_breakdown_tooltip = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		background = {
			using = Background_Area_Border_Solid
		}

		vbox = {
			datamodel = "[ValueBreakdown.GetSubValues]"
			alwaystransparent = no
			restrictparent_min = yes
			margin = { 17 10 }
			spacing = 3

			item = {
				hbox = {
					name = "value_breakdown"
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "[ValueBreakdown.GetName]"
						min_width = 180
						max_width = 250
						fonttintcolor = "[TooltipInfo.GetTintColor]"
						margin_right = 10
					}

					text_single= {
						visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
						name = "value_with_tooltip"
						text = "[ValueBreakdown.GetValue|L]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"

						using = tooltip_below

						tooltipwidget = {
							recursive = yes

							widget_value_breakdown_tooltip = {}
						}
					}

					text_single = {
						visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
						name = "value_with_no_tooltip"
						text = "[ValueBreakdown.GetValue]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}
				}
			}
		}
	}

	## Gold Breakdown Tooltip
	type widget_gold_breakdown_tooltip = widget {
		size = { 50 50 }
		alwaystransparent = no

		block "background" { #### needed to solve the hack for tooltip in Realm View
			using = DefaultTooltipBackground
		}

		vbox = {
			layoutpolicy_horizontal = expanding
		
			restrictparent_min = yes
			minimumsize = { 280 0 }
			
			margin = { 15 10 }
			spacing = 20
			
			block "my_gold" {}
		
			vbox_gold_breakdown = {
				name = "income"
				layoutpolicy_horizontal = expanding
				block "income" {}
			}
			
			vbox_gold_breakdown = {
				name = "expenses"
				layoutpolicy_horizontal = expanding
				block "expenses" {}
			}
			
			block "gold_income" {}
		}
	}

	type vbox_gold_breakdown = vbox {
		spacing = 5
		alwaystransparent = no

		vbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "[ValueBreakdown.GetName]"
				default_format = "#T"

				background = {
					using = Background_Area
					margin = { 10 0 }
					margin_bottom = 5
				}
			}

			vbox = {
				name = "values_grid"
				datamodel = "[ValueBreakdown.GetSubValues]"
				layoutpolicy_horizontal = expanding

				item = {
					hbox = {
						name = "value_breakdown"
						layoutpolicy_horizontal = expanding
						spacing = 10

						text_single = {
							name = "name"
							layoutpolicy_horizontal = expanding
							text = "[ValueBreakdown.GetName]"
						}

						text_single = {
							name = "value_with_tooltip"
							visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
							text = "[ValueBreakdown.GetValue|L]"
							align = right
							default_format = "#high"

							using = tooltip_se

							tooltipwidget = {
								widget_value_breakdown_tooltip = {}
							}
						}

						text_single = {
							name = "value_with_no_tooltip"
							visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
							text = "[ValueBreakdown.GetValue]"
							align = right
						}
					}
				}
			}

			text_single = {
				visible = "[Not(DataModelHasItems( ValueBreakdown.GetSubValues ))]"
				layoutpolicy_horizontal = expanding
				block "no_values" {
					text = "VALUE_BREAKDOWN_NO_VALUES"
				}
				default_format = "#weak"
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}


				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding

						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[ValueBreakdown.GetValue|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	## Resource Breakdown Tooltip
	type widget_resource_value_tooltip = widget {
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			name = "tooltip_container"
			restrictparent_min = yes
			filter_mouse = all
			margin = { 15 15 }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_bottom = 20
				spacing = 5

				block "header" {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "MY_VALUE_LABEL"
					default_format = "#high;bold"
					using = Font_Size_Medium
					fonttintcolor = "[TooltipInfo.GetTintColor]"

					background = {
						using = Background_Area
						margin = { 10 0 }
						margin_bottom = 5
					}
				}

				text_single = {
					name = "total_label"
					layoutpolicy_horizontal = expanding
					text = "TOTAL_BREAKDOWN_LABEL"

					using = tooltip_ws

					tooltipwidget = {
						widget = {
							size = { 50 50 }
							alwaystransparent = no

							widget = {
								name = "background"
								using = DefaultTooltipBackground
								size = { 100% 100% }
								alwaystransparent = yes

								blockoverride "frame_color" {
									tintcolor = { 0.7 0.7 0.7 1}
								}
							}

							vbox = {
								restrictparent_min = yes
								margin = { 5 5 }
								vbox = {
									datacontext = "[PlayerValueItem.GetBalanceGained]"
									visible = "[ValueBreakdown.HasTooltip]"
									layoutpolicy_horizontal = expanding

									background = {
										using = Background_Area_Border_Solid
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 15 0 }
										margin_bottom = 5

										text_single = {
											name = "gained_label"
											layoutpolicy_horizontal = expanding
											text = "GAINED_BREAKDOWN_LABEL_LINK"
											fonttintcolor = "[TooltipInfo.GetTintColor]"
										}

										text_single = {
											name = "gained_value"
											visible = "[ValueBreakdown.ShouldShowValue]"
											text = "[ValueBreakdown.GetValue]"
											fonttintcolor = "[TooltipInfo.GetTintColor]"
										}
									}

									widget_value_breakdown_tooltip = {
										layoutpolicy_horizontal = expanding
									}
								}
							}
						}
					}
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15

				hbox = {
					spacing = 5
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area
						margin = { 10 0 }
						margin_bottom = 5
					}

					text_single = {
						text = "PLAYER_VALUE_LEVEL_LABEL"
						layoutpolicy_horizontal = expanding

						default_format = "#T"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					text_single = {
						name = "current_level"
						layoutpolicy_horizontal = expanding

						text = "[PlayerValueItem.GetCurrentLevelName]"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					expand = {}
				}

				vbox = {
					visible = "[PlayerValueItem.HasNextLevel]"
					layoutpolicy_horizontal = expanding
					spacing = 5

					text_single = {
						name = "progress_label"
						layoutpolicy_horizontal = expanding

						text = "[PlayerValueItem.GetProgressTowardNextLevelLabel]"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = -3

						progressbar_standard = {
							layoutpolicy_horizontal = expanding
							size = { -1 15 }
							tintcolor = "[TooltipInfo.GetTintColor]"
							value = "[PlayerValueItem.GetProgressTowardNextLevel]"
							tooltip = "[PlayerValueItem.GetProgressTooltip]"
						}

						expand = {}
					}
				}
			}
		}
	}
	
	## Magic Breakdown Tooltip
	type widget_magic_value_tooltip = widget {
		alwaystransparent = no
		size = { 50 50 }

		using = DefaultTooltipBackground

		vbox = {
			name = "tooltip_container"
			restrictparent_min = yes
			minimumsize = { 280 0 }
			filter_mouse = all
			margin = { 15 15 }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_bottom = 5
				spacing = 5

				block "header" {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[magic|E]"
					default_format = "#high;bold"
					using = Font_Size_Medium
					fonttintcolor = "[TooltipInfo.GetTintColor]"

					background = {
						using = Background_Area
						margin = { 10 0 }
						margin_bottom = 5
					}
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				margin_bottom = 10
				text_single = {
					name = "magic_add_label"
					layoutpolicy_horizontal = expanding
					text = "#T Sources #!"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				text_single = {
					name = "trait_magic_add_label"
					layoutpolicy_horizontal = expanding
					text = "Character: "
					align = left
					
					using = tooltip_ws
				}
				
				text_single = {
					name = "trait_magic_add"
					layoutpolicy_horizontal = expanding
					text = "#L #V +[FixedPointToFloat(GetPlayer.MakeScope.Var('trait_magic_add').GetValue)|1]#!#!/month"
					align = right
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				
				
				text_single = {
					name = "province_modifier_magic_add_label"
					layoutpolicy_horizontal = expanding
					text = "County Modifiers: "
					align = left
					
					using = tooltip_ws
				}
				
				text_single = {
					name = "province_modifier_magic_add"
					layoutpolicy_horizontal = expanding
					text = "#L #V +[FixedPointToFloat(GetPlayer.MakeScope.Var('county_modifier_magic_add').GetValue)|1]#!#!/month"
					align = right
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				text_single = {
					name = "building_magic_add_label"
					layoutpolicy_horizontal = expanding
					text = "Buildings: "
					align = left
					
					using = tooltip_ws
				}
				
				text_single = {
					name = "building_magic_add"
					layoutpolicy_horizontal = expanding
					text = "#L #V +[FixedPointToFloat(GetPlayer.MakeScope.Var('building_magic_add').GetValue)|1]#!#!/month"
					align = right
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				
				#visible = "[GreaterThan_CFixedPoint(GetPlayer.MakeScope.Var('character_modifier_magic_add').GetValue, '(CFixedPoint)0')]"
				
				text_single = {
					name = "character_modifier_magic_add_label"
					layoutpolicy_horizontal = expanding
					text = "Artifacts and Modifiers: "
					align = left
					
					using = tooltip_ws
				}
				
				text_single = {
					name = "character_modifier_magic_add"
					layoutpolicy_horizontal = expanding
					text = "#L #V +[FixedPointToFloat(GetPlayer.MakeScope.Var('character_modifier_magic_add').GetValue)|1]#!#!/month"
					align = right
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				
				#visible = "[GreaterThan_CFixedPoint(GetPlayer.MakeScope.Var('character_modifier_magic_add').GetValue, '(CFixedPoint)0')]"
				
				text_single = {
					name = "character_modifier_magic_add_label"
					layoutpolicy_horizontal = expanding
					text = "Court Magi: "
					align = left
					
					using = tooltip_ws
				}
				
				text_single = {
					name = "character_modifier_magic_add"
					layoutpolicy_horizontal = expanding
					text = "#L #V +[FixedPointToFloat(GetPlayer.MakeScope.Var('court_mage_magic').GetValue)|1]#!#!/month"
					align = right
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				
				margin_bottom = 10
				
				#visible = "[GreaterThan_CFixedPoint(GetPlayer.MakeScope.Var('character_modifier_magic_add').GetValue, '(CFixedPoint)0')]"
				
				text_single = {
					name = "character_modifier_magic_add_label"
					layoutpolicy_horizontal = expanding
					text = "Other: "
					align = left
					
					using = tooltip_ws
				}
				
				text_single = {
					name = "character_modifier_magic_add"
					layoutpolicy_horizontal = expanding
					text = "#L #V +[FixedPointToFloat(GetPlayer.MakeScope.Var('complex_magic_add').GetValue)|1]#!#!/month"
					align = right
					
					using = tooltip_ws
				}
			}
			
			divider_light = {
				layoutpolicy_horizontal = expanding
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				margin_bottom = 10
				text_single = {
					name = "magic_multiply_label"
					layoutpolicy_horizontal = expanding
					text = "#T Expenses #!"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				
				margin_bottom = 10
				
				#visible = "[GreaterThan_CFixedPoint(GetPlayer.MakeScope.Var('character_modifier_magic_add').GetValue, '(CFixedPoint)0')]"
				
				text_single = {
					name = "troop_magic_add_label"
					layoutpolicy_horizontal = expanding
					text = "Retinues: "
					align = left
					
					using = tooltip_ws
				}
				
				text_single = {
					name = "troop_magic_add"
					layoutpolicy_horizontal = expanding
					text = "#L #N -[FixedPointToFloat(GetPlayer.MakeScope.Var('retinue_magic_add').GetValue)]#!#!/month"
					align = right
					
					using = tooltip_ws
				}
			}
			
			divider_light = {
				layoutpolicy_horizontal = expanding
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				margin_bottom = 10
				text_single = {
					name = "magic_multiply_label"
					layoutpolicy_horizontal = expanding
					text = "#T Total Multiplier: #!"
					align = left
					
					using = tooltip_ws
				}
				
				text_single = {
					name = "troop_magic_add"
					layoutpolicy_horizontal = expanding
					text = "#L #P +[FixedPointToFloat(GetPlayer.MakeScope.Var('monthly_magic_multiply_percentage').GetValue)]%#!#!"
					align = right
					
					using = tooltip_ws
				}
			}
			
			divider_light = {
				layoutpolicy_horizontal = expanding
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15
				
				text_single = {
					name = "total_label"
					layoutpolicy_horizontal = expanding
					text = "Total: "
					align = left
					
					using = tooltip_ws
				}
				
				text_single = {
					name = "total_text"
					layoutpolicy_horizontal = expanding
					text = "#positive_value;underline +[FixedPointToFloat(GetPlayer.MakeScope.Var('monthly_magic').GetValue)]#!/month"
					align = right
					
					using = tooltip_ws
				}
			}
			
			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 10
				margin_bottom = 10
				spacing = 5

				block "header" {}
				
				hbox = {
					spacing = 5
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area
						margin = { 10 0 }
						margin_bottom = 5
					}

					text_single = {
						text = "Overcharge Level:"
						layoutpolicy_horizontal = expanding

						default_format = "#T"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					text_single = {
						name = "current_level"
						layoutpolicy_horizontal = expanding

						text = "#L #V Safe#!#!"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					expand = {}
				}
				
				#text_single = {
				#	layoutpolicy_horizontal = expanding
				#	text = "#E Overcharge Level:#!"
				#	default_format = "#high;bold"
				#	using = Font_Size_Medium
				#	fonttintcolor = "[TooltipInfo.GetTintColor]"
				#
				#	background = {
				#		using = Background_Area
				#		margin = { 10 0 }
				#		margin_bottom = 5
				#	}
				#}
				#
				#text_single = {
				#	layoutpolicy_horizontal = expanding
				#	text = "#L #V Safe#!#!"
				#	default_format = "#high;bold"
				#	using = Font_Size_Medium
				#	fonttintcolor = "[TooltipInfo.GetTintColor]"
				#	align = right
				#
				#	background = {
				#		using = Background_Area
				#		margin = { 10 0 }
				#		margin_bottom = 5
				#	}
				#}
			}
			
			progressbar_standard = {
				layoutpolicy_horizontal = expanding
				size = { -1 15 }
				
				min = 0
				max = 200 # or "[GetPlayer.MakeScope.Var('magic_max_value').GetValue|0]"
				value = "[FixedPointToFloat(GetPlayer.MakeScope.Var('magic_counter').GetValue)]"
				
				tintcolor = "[TooltipInfo.GetTintColor]"
			}
		}
	}

	# Requires a ActiveCouncilTask datacontext
	type council_task_progress_breakdown_widget = widget
	{
		size = { 50 50 }
		alwaystransparent = no
		datacontext = "[ActiveCouncilTask.GetProgressBreakdown]"

		using = DefaultTooltipBackground

		vbox = {
			restrictparent_min = yes
			minimumsize = { 280 0 }

			margin = { 10 10 }

			layoutpolicy_horizontal = expanding

			text_single = {
				name = "header"
				text = COUNCIL_TASK_PROGRESSBAR_TOOLTIP_HEADER
			}

			text_single = {
				name = "frozen"
				text = COUNCIL_TASK_PROGRESSBAR_FROZEN
				visible = "[ActiveCouncilTask.IsFrozen]"
			}

			vbox = {
				name = "progress_breakdown"
				layoutpolicy_horizontal = expanding
				visible = "[And( ActiveCouncilTask.GetTaskType.IsProgressDefined, Not( ActiveCouncilTask.IsFrozen ) )]"

				margin = { 0 5 }

				text_single = {
					name = "progress_rate_header"
					visible = "[ActiveCouncilTask.GetTaskType.IsPercentageTask]"
					text = COUNCIL_TASK_PROGRESS_RATE
				}
				text_single = {
					name = "progress_rate_header_value"
					visible = "[Not( ActiveCouncilTask.GetTaskType.IsPercentageTask )]"
					text = COUNCIL_TASK_PROGRESS_RATE_VALUE
				}

				widget_value_breakdown_tooltip = {
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					name = "task_eta"
					text = "[ActiveCouncilTask.GetETA]"
				}
			}
		}
	}
	
	## Merit Breakdown Tooltip
	type widget_merit_tooltip = widget {
		alwaystransparent = no
		size = { 50 50 }

		using = DefaultTooltipBackground

		vbox = {
			name = "tooltip_container"
			restrictparent_min = yes
			minimumsize = { 280 0 }
			filter_mouse = all
			margin = { 15 10 }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_bottom = 5
				spacing = 5

				block "header" {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[merit|E]: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_merit_value')|0]"
					default_format = "#high;bold"
					using = Font_Size_Medium
					fonttintcolor = "[TooltipInfo.GetTintColor]"
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "martial_merit_label"
					layoutpolicy_horizontal = expanding
					text = "From [martial|E]: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_merit_value_from_martial')|V0]"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "martial_merit_label"
					layoutpolicy_horizontal = expanding
					text = "From [intrigue|E]: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_merit_value_from_intrigue')|V0]"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "martial_merit_label"
					layoutpolicy_horizontal = expanding
					text = "From [prowess|E]: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_merit_value_from_prowess')|V0]"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "martial_merit_label"
					layoutpolicy_horizontal = expanding
					text = "From #E Boldness#! (Personality): [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_merit_value_from_boldness')|V0]"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "martial_merit_label"
					layoutpolicy_horizontal = expanding
					text = "From #E Ambition#! (Personality): [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_merit_value_from_energy')|V0]"
					align = left
					
					using = tooltip_ws
				}
			}
		}
	}
	
	##Influence Breakdown Tooltip
	type widget_influence_tooltip = widget {
		alwaystransparent = no
		size = { 50 50 }

		using = DefaultTooltipBackground

		vbox = {
			name = "tooltip_container"
			restrictparent_min = yes
			minimumsize = { 280 0 }
			filter_mouse = all
			margin = { 15 10 }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_bottom = 5
				spacing = 5

				block "header" {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "#E Influence#!: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_influence_total')|0]"
					default_format = "#high;bold"
					using = Font_Size_Medium
					fonttintcolor = "[TooltipInfo.GetTintColor]"
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "influence_from_powerbase_label"
					layoutpolicy_horizontal = expanding
					text = "#E Powerbase#!: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_powerbase_total')|V0]"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "influence_from_internal_label"
					layoutpolicy_horizontal = expanding
					text = "Internal Clique Influence: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_clique_internal_influence_total')|V0]"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "clique_power_factor_label"
					layoutpolicy_horizontal = expanding
					text = "Clique Power: #color_white [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_clique_power_percentage')|V0]%#!"
					align = left
					
					using = tooltip_ws
				}
			}
		}
	}

	##Powerbase Breakdown Tooltip
	type widget_powerbase_tooltip = widget {
		alwaystransparent = no
		size = { 50 50 }

		using = DefaultTooltipBackground

		vbox = {
			name = "tooltip_container"
			restrictparent_min = yes
			minimumsize = { 280 0 }
			filter_mouse = all
			margin = { 15 10 }

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_bottom = 5
				spacing = 5

				block "header" {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "#E Powerbase#!: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_powerbase_total')|0]"
					default_format = "#high;bold"
					using = Font_Size_Medium
					fonttintcolor = "[TooltipInfo.GetTintColor]"
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "holdings_powerbase_label"
					layoutpolicy_horizontal = expanding
					text = "[holdings|E]: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_powerbase_holdings')|V0]"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "gold_powerbase_label"
					layoutpolicy_horizontal = expanding
					text = "[gold|E]: [GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_powerbase_gold')|V0]"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "diplomacy_factor_powerbase_label"
					layoutpolicy_horizontal = expanding
					text = "[diplomacy|E]: #color_white +[GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_powerbase_diplomacy_factor_percentage')|V0]%#!"
					align = left
					
					using = tooltip_ws
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 15
				margin_bottom = 10
				spacing = 15
				text_single = {
					name = "intrigue_factor_powerbase_label"
					layoutpolicy_horizontal = expanding
					text = "[intrigue|E]: #color_white +[GuiScope.SetRoot( Character.MakeScope ).ScriptValue('character_powerbase_intrigue_factor_percentage')|V0]%#!"
					align = left
					
					using = tooltip_ws
				}
			}
		}
	}
	
	## Lifepath Relevance Tooltip
	type widget_lifepath_relevance_tooltip = widget {
		alwaystransparent = no
		#layoutpolicy_horizontal = expanding
		#layoutpolicy_vertical = expanding
		#size = { 50 50 }

		using = DefaultTooltipBackground

		vbox = {
			name = "tooltip_container"
			restrictparent_min = yes
			#maximumsize = { 360 -1 }
			filter_mouse = all
			margin = { 15 10 }

			vbox = {
				#layoutpolicy_horizontal = expanding
				#layoutpolicy_vertical = expanding
				margin_bottom = 5
				spacing = 5

				block "header" {}

				text_single = {
					#layoutpolicy_horizontal = expanding
					text = "[lifepath|E] Relevance: [FixedPointToProgressbarValue(Faith.MakeScope.Var('lifepath_relevance_measure').GetValue)]%"
					default_format = "#high;bold"
					using = Font_Size_Medium
					fonttintcolor = "[TooltipInfo.GetTintColor]"
				}
				#text_single = { # WIP until I figure this out - Hapchazzard
				#	#layoutpolicy_horizontal = expanding
				#	#layoutpolicy_vertical = expanding
				#	#maximumsize = { 360 -1 }
				#	text = LIFEPATH_RELEVANCE_TOOLTIP_TEXT
				#	default_format = "#low"
				#	using = Font_Size_Small
				#	fonttintcolor = "[TooltipInfo.GetTintColor]"
				#}
			}
		}
	}
}