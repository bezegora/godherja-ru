
secret_magic_murder = {
	category = murder

	is_valid = {
		secret_murder_is_valid_trigger = {
			OWNER = scope:secret_owner
			TARGET = scope:secret_target
		}
	}

	is_shunned = { # always = no
		OR = {
			secret_magic_is_shunned_trigger = {
				OWNER = scope:secret_owner
			}
			secret_murder_is_shunned_trigger = {
				OWNER = scope:secret_owner
				TARGET = scope:secret_target
			}
		}
	}

	is_criminal = { # always = yes
		OR = {
			secret_magic_is_criminal_trigger = {
				OWNER = scope:secret_owner
			}
			secret_murder_is_criminal_trigger = {
				OWNER = scope:secret_owner
				TARGET = scope:secret_target
			}
		}
	}

	on_discover = {
		scope:secret_target = { save_scope_as = victim }
		scope:secret_owner = { save_scope_as = murderer }

		if = {
			limit = { scope:victim = { is_alive = no } }
			scope:victim = { add_knows_of_killer = scope:discoverer }
		}

		scope:discoverer = {
			# TODO: implement the block_secret_murder_discovery_event logic for magic murder secrets
			if = {
				limit = {
					NOT = {
						has_character_flag = block_secret_murder_discovery_event
					}
				}

				#EVENT FOR DISCOVERER WHO IS CLOSE FAMILY/SPOUSE OF VICTIM (can get crime reason on expose)#
				if = {
					limit = {
						OR = {
							is_spouse_of_even_if_dead = scope:victim
							is_close_family_of = scope:victim
						}
						NOT = { this = scope:murderer }
					}
					trigger_event = secrets.0512
				}
			}
			else = { remove_character_flag = block_secret_murder_discovery_event }
		}
	}

	on_expose = {
		save_scope_as = secret

		scope:secret_target = {
			save_scope_as = victim
		}
		scope:secret_owner = {
			save_scope_as = murderer
		}
		if = {
			limit = { exists = var:known_murder }
			save_scope_value_as = {
				name = known_murder
				value = yes
			}
		}

		###EXPOSURE EVENTS/EFFECTS###
		
		if = {
			limit = { NOT = { exists = scope:known_murder } }
			scope:murderer = { trigger_event = magic.2451 } #Applies consequence effects
			scope:victim = { set_killer_public = yes }
		}
		else = {
			scope:murderer = {
				magic_secret_exposed_owner_effects_effect = { SECRET = scope:secret POV = scope:murderer }
				secret_exposed_owner_opinion_effects_effect = yes
			}
		}

		# TODO: write our own exposed notification event; currently this one
		# does nothing for us due to the list of secret types it iterates over
		# being hard-coded
		secret_exposed_notification_effect = yes
		
		###Set murderer & death_reason###
		if = {
			limit = { scope:victim = { is_alive = no } } #Is alive for known/instantly exposed murders
			scope:victim = {
				set_death_reason = {
					death_reason = death_magic_targeted_spell
					killer = scope:murderer
				}
			}
		}
	}
}

secret_magic_harm = {
	category = murder

	is_valid = {
		secret_murder_attempt_is_valid_trigger = {
			OWNER = scope:secret_owner
			TARGET = scope:secret_target
		}
	}

	is_shunned = {
		OR = {
			secret_magic_is_shunned_trigger = {
				OWNER = scope:secret_owner
			}
			secret_murder_attempt_is_shunned_trigger = {
				OWNER = scope:secret_owner
				TARGET = scope:secret_target
			}
		}
	}

	is_criminal = {
		OR = {
			secret_magic_is_criminal_trigger = {
				OWNER = scope:secret_owner
			}
			secret_murder_attempt_is_criminal_trigger = {
				OWNER = scope:secret_owner
				TARGET = scope:secret_target
			}
		}
	}

	on_discover = {
		scope:secret_target = { save_scope_as = victim }
		scope:secret_owner = { save_scope_as = murderer }
		scope:discoverer = {
			if = {
				limit = {
					NOT = { has_character_flag = block_secret_murder_attempt_discovery_event }
					NOT = { this = scope:murderer }
				}

				#EVENT FOR VICTIM DISCOVERING THE MURDER ATTEMPT#
				# TODO: write our own magic-specific murder events
				if = {
					limit = { this = scope:victim }
					trigger_event = secrets.0510
				}
				#EVENT FOR DISCOVERER WHO IS SPOUSE/PARENT OF VICTIM#
				else_if = {
					limit = {
						scope:victim = { is_alive = yes }
						OR = {
							is_consort_of = scope:victim
							is_parent_of = scope:victim
							AND = {
								exists = scope:discoverer.player_heir
								this = scope:discoverer.player_heir
							}
						}
					}
					trigger_event = secrets.0511
				}
			}
			else = { remove_character_flag = block_secret_murder_attempt_discovery_event }
		}
	}

	on_expose = {
		save_scope_as = secret
		scope:secret_target = {
			save_scope_as = victim
		}
		scope:secret_owner = {
			save_scope_as = murderer
		}

		###EXPOSURE EVENTS###
		scope:murderer = { trigger_event = magic.2450 } #Applies consequence effects

		scope:victim = {
			if = {
				limit = { is_alive = yes }
				if = {
					limit = { any_known_secret = { this = scope:secret } }
					add_character_flag = {
						flag = victim_knows
						days = 10
					}
				}
				# TODO: write our own magic-specific murder events
				trigger_event = secrets.0116
			}
		}

		# TODO: write our own exposed notification event; currently this one
		# does nothing for us due to the list of secret types it iterates over
		# being hard-coded
		secret_exposed_notification_effect = yes
	}
}
