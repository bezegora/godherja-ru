create_holy_order_effect = {
	if = {
		limit = {
			exists = faith.religious_head
		}
		faith.religious_head = {
			add_opinion = {
				target = root
				modifier = founded_holy_order_opinion
			}
		}
	}
	if = {
		limit = {
			NOT = { has_character_modifier = founded_holy_order_modifier }
		}
		add_character_modifier = {
			modifier = founded_holy_order_modifier
			years = 5
		}
	}
	faith = {
		change_fervor = 10
	}
}

accept_cannibalism_decision_effect = {
	custom_tooltip = faith_accept_cannibalism
	root.faith = {
		set_variable = {
			name = accepted_cannibalism
			value = yes
		}
	}
	root = {
		if = {
			limit = {
				any_spouse = {
					is_cannibal_trigger = no
					is_ai = yes
				}
			}
			every_spouse = {
				limit = {
					is_cannibal_trigger = no
					is_ai = yes
				}
				add_trait = cannibal
			}
		}
		if = {
			limit = {
				any_close_family_member = {
					is_cannibal_trigger = no
					is_landed = no
					is_ai = yes
				}
			}
			every_close_family_member = {
				limit = {
					is_cannibal_trigger = no
					is_landed = no
					is_ai = yes
				}
				custom = all_my_family_members
				add_trait = cannibal
			}
		}
		if = {
			limit = {
				any_vassal = {
					is_cannibal_trigger = no
					is_ai = yes
					dread_modified_ai_boldness = { #all vassals that are intimidated
						dreaded_character = root
						value <= -50
					}
				}
			}
			every_vassal = {
				limit = {
					is_cannibal_trigger = no
					is_ai = yes
					dread_modified_ai_boldness = {
						dreaded_character = root
						value <= -50
					}
				}
				custom = all_my_intimidated_vassals
				add_trait = cannibal
			}
		}
	}
	give_nickname = nick_the_devourer
}

found_university_decision_event_effect = {
	if = {
		limit = {
			NOT = { has_nickname = nick_the_scholar }
		}
		give_nickname = nick_the_scholar
	}

	hidden_effect = {
		#Event that gives you highly skilled courtier
		random = {
			chance = 75
			trigger_event = {
				id = major_decisions.2011
				days = { 50 365 }
			}
		}
	}
}

found_university_decision_effect = {
	found_university_decision_event_effect = yes

	if = {
		limit = {
			NOT = { has_variable = university }
		}
		show_as_tooltip = {
			every_held_title = {
				custom = decision_found_university_custom
				limit = { tier = tier_barony }
				title_capital_county.title_province = {
					add_special_building_slot = generic_university
				}
			}
		}
	}
}

lunatic_building_decision_effect = {
	capital_province = {
		set_variable = { #To unlock the building
			name = variable_greenhouse
			value = yes
		}
		add_building_slot = 1
		add_building = special_greenhouse_01
	}
	
	give_nickname = nick_the_glass
}

convert_whole_realm_to_feudalism_effect = {
	#TOOLTIP INFO
	#PLAYER EFFECTS
	##Liege has clan? Convert to clan!
	if = {
		limit = {
			is_independent_ruler = no
			liege = { has_government = clan_government }
		}
		change_government = clan_government
	}
	##Liege has feudal? Convert to feudal!
	else_if = {
		limit = {
			is_independent_ruler = no
			liege = { has_government = feudal_government }
		}
		change_government = feudal_government
	}
	##You're an independent anything else? Convert to feudal!
	else = { change_government = feudal_government }
	##General
	custom_tooltip = all_holding_will_change
	##Liege has clan? Convert to clan!
	if = {
		limit = {
			is_independent_ruler = no
			liege = { has_government = clan_government }
		}
		custom_tooltip = clan_liege_vassals_will_convert
	}
	#Liege has feudal? Convert to feudal!
	if = {
		limit = {
			is_independent_ruler = no
			liege = { has_government = feudal_government }
		}
		custom_tooltip = feudal_liege_vassals_will_convert
	}
	##If I am not Islamic, we will become feudal.
	else_if = {
		limit = { is_independent_ruler = yes }
		custom_tooltip = other_vassals_will_convert
	}

	hidden_effect = {
		#Nuke tribal authorities.
		if = {
			limit = { has_realm_law = tribal_authority_0 }
			remove_realm_law = tribal_authority_0
		}
		if = {
			limit = { has_realm_law = tribal_authority_1 }
			remove_realm_law = tribal_authority_1
		}
		if = {
			limit = { has_realm_law = tribal_authority_2 }
			remove_realm_law = tribal_authority_2
		}
		if = {
			limit = { has_realm_law = tribal_authority_3 }
			remove_realm_law = tribal_authority_3
		}
		#Start off crown authorities.
		if = {
			limit = {
				NOT = { has_realm_law = crown_authority_0 }
			}
			add_realm_law_skip_effects = crown_authority_0
		}

		#Also convert every vassal.
		#Liege has taken clan, so become clan.
		if = {
			limit = {
				has_government = clan_government
			}
			every_vassal_or_below = {
				limit = { has_government = tribal_government }
				change_government = clan_government
				#Nuke tribal authorities.
				if = {
					limit = { has_realm_law = tribal_authority_0 }
					remove_realm_law = tribal_authority_0
				}
				if = {
					limit = { has_realm_law = tribal_authority_1 }
					remove_realm_law = tribal_authority_1
				}
				if = {
					limit = { has_realm_law = tribal_authority_2 }
					remove_realm_law = tribal_authority_2
				}
				if = {
					limit = { has_realm_law = tribal_authority_3 }
					remove_realm_law = tribal_authority_3
				}
				if = {
					limit = {
						NOT = { has_realm_law = crown_authority_0 }
					}
					add_realm_law_skip_effects = crown_authority_0
				}
			}
		}
		#Liege is not clan, become feudal.
		else = {
			every_vassal_or_below = {
				limit = { has_government = tribal_government }
				change_government = feudal_government
				#Nuke tribal authorities.
				if = {
					limit = { has_realm_law = tribal_authority_0 }
					remove_realm_law = tribal_authority_0
				}
				if = {
					limit = { has_realm_law = tribal_authority_1 }
					remove_realm_law = tribal_authority_1
				}
				if = {
					limit = { has_realm_law = tribal_authority_2 }
					remove_realm_law = tribal_authority_2
				}
				if = {
					limit = { has_realm_law = tribal_authority_3 }
					remove_realm_law = tribal_authority_3
				}
				if = {
					limit = {
						NOT = { has_realm_law = crown_authority_0 }
					}
					add_realm_law_skip_effects = crown_authority_0
				}
			}
		}
		
		## Spawn holdings in tribal counties
		
		every_sub_realm_county = { # Spawn temples in your holy sites
			limit = {
				any_county_province = {
					has_holding_type = tribal_holding
				}
				NOT = {
					any_county_province = {
						has_holding_type = church_holding
					}
				}
				any_county_province = {
					has_holding = no
					barony = {
						is_holy_site_of = root.faith
					}
				}
			}
			random_county_province = {
				limit = {
					has_holding = no
					barony = {
						is_holy_site_of = root.faith
					}
				}
				set_holding_type = church_holding
			}
		}
		
		every_sub_realm_county = { # Spawn a City
			limit = {
				any_county_province = {
					has_holding_type = tribal_holding
				}
				any_county_province = {
					has_holding = no
				}
				NOT = {
					any_county_province = {
						has_holding_type = city_holding
					}
				}
			}
			random_county_province = {
				limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
					is_coastal = yes
					has_special_building_slot = no
				}
				alternative_limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
					has_special_building_slot = no
				}
				alternative_limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
				}
				alternative_limit = {
					has_holding = no
				}
				random = {
					chance = 60
					modifier = {
						add = county.development_level
					}
					modifier = {
						add = 50
						this.county = root.capital_county
					}
					modifier = {
						add = 20
						OR = {
							terrain = floodplains
							terrain = oasis
							terrain = farmlands
						}
					}
					set_holding_type = city_holding
				}
			}
		}
		
		every_sub_realm_county = { # Spawn a Temple
			limit = {
				any_county_province = {
					has_holding_type = tribal_holding
				}
				any_county_province = {
					has_holding = no
				}
				NOT = {
					any_county_province = {
						has_holding_type = church_holding
					}
				}
			}
			random_county_province = {
				limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
					is_coastal = yes
					has_special_building_slot = no
				}
				alternative_limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
					has_special_building_slot = no
				}
				alternative_limit = {
					has_holding = no
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
				}
				alternative_limit = {
					has_holding = no
				}
				random = {
					chance = 50
					modifier = {
						add = county.development_level
					}
					modifier = {
						add = 50
						this.county = root.capital_county
					}
					modifier = {
						add = 20
						OR = {
							terrain = floodplains	
							terrain = oasis
							terrain = farmlands
						}
					}
					set_holding_type = church_holding
				}
			}
		}

		##Sort out new buildings for liege and all vassals
		every_realm_province = {
			limit = {
				has_holding_type = tribal_holding
				NOT = { is_in_list = feudal_conversion }
			}
			add_to_list = feudal_conversion

		}
		every_vassal_or_below = {
			every_realm_province = {
				limit = {
					has_holding_type = tribal_holding
					NOT = { is_in_list = feudal_conversion }
				}
				add_to_list = feudal_conversion

			}
		}
		every_in_list = {
			list = feudal_conversion
			set_variable = {
				name = tribal_to_feudal_building_level
				value = combined_building_level
				days = 1
			}
			set_holding_type = castle_holding
			while = {
				limit = {
					var:tribal_to_feudal_building_level > 1
				}
				generate_building = yes
				change_variable = {
					name = tribal_to_feudal_building_level
					subtract = 1
				}
			}
			remove_variable = tribal_to_feudal_building_level
			remove_from_list = feudal_conversion
		}
	}
}

##################################################
# Found Cadet House Effects
found_cadet_house_decision_effect = {
	hidden_effect = {
		house.house_head = {
			save_scope_as = former_house_head
		}
		house = {
			save_scope_as = former_house
		}
		add_achievement_flag_effect = { FLAG = achievement_a_house_of_my_own_flag }
	}
	create_cadet_branch = yes
	add_prestige = $PRESTIGE$
	hidden_effect = {
		save_scope_as = new_head
		house = {
			save_scope_as = new_house
		}
		every_player = {
			limit = {
				exists = house
				house = scope:new_house
				NOT = { this = $CHARACTER$ }
			}
			send_interface_toast = {
				type = msg_created_new_house
				title = created_cadet_branch_toast_new_house_desc
				left_icon = scope:new_head
				desc = created_cadet_branch_toast_new_house_other_tt
			}
		}
		send_interface_toast = {
			type = msg_created_new_house
			title = created_cadet_branch_toast_new_house_desc
			left_icon = scope:new_head
			right_icon = scope:former_house_head
			desc = created_cadet_branch_toast_new_house_other_tt
		}
	}
}
