
####SPELL EFFECTS

### LIVING MAGIC ###

## ETERNAL LIFE, ENDLESS TORTURE ## thank you doodle
vampiric_drain = {
	scope = character

	effect = {
		vampiric_drain_effect = yes
		increase_progress_to_living_magi_trait = yes
		send_interface_toast = { title = vampiric_toast }
	}
}

thinning = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			send_interface_toast = { title = thinning_toast }
			increase_progress_to_living_magi_trait = yes
			personal_harmful_spell_apply_personality_effects = yes
			apply_spell_effect_with_backfire_chance_list = { TIER = 2 SUCCESS_CHANCE = standard_spell_difficulty_success_chance SPELL_EFFECT = thinning_effect FAILURE_CHANCE = standard_spell_difficulty_failure_chance }
		}
	}
}

poison = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			send_interface_toast = { title = poison_toast }
			increase_progress_to_living_magi_trait = yes
			personal_deadly_spell_apply_personality_effects = yes
			apply_spell_effect_with_backfire_chance_list = {
				TIER = 2
				SUCCESS_CHANCE = standard_spell_difficulty_success_chance
				SPELL_EFFECT = poison_effect
				FAILURE_CHANCE = standard_spell_difficulty_failure_chance
			}
		}
	}
}

domination = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			send_interface_toast = {
				title = domination_toast
			}
			increase_progress_to_living_magi_trait = yes
			apply_spell_effect_with_custom_backfire_chance_list = {
				TIER = 3
				SUCCESS_CHANCE = standard_spell_difficulty_success_chance
				SPELL_EFFECT = domination_effect
				FAILURE_CHANCE = standard_spell_difficulty_failure_chance
				BACKFIRE_EFFECT = domination_backfire_effect
			}
		}
	}
}

healing_water = {
	scope = character

	effect = {
		increase_progress_to_living_magi_trait = yes
		personal_beneficial_spell_apply_personality_effects = yes
		apply_spell_effect_with_custom_backfire_chance_list = {
			TIER = 1
			SPELL_EFFECT = healing_water_effect
			SUCCESS_CHANCE = difficult_spell_difficulty_success_chance_nonhostile
			FAILURE_CHANCE = difficult_spell_difficulty_failure_chance_nonhostile
			BACKFIRE_EFFECT = poison_effect
		}
	}
}

thralldom = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			increase_progress_to_living_magi_trait = yes
			apply_spell_effect_with_custom_backfire_chance_list = {
				TIER = 3
				SPELL_EFFECT = thralldom_effect
				SUCCESS_CHANCE = difficult_spell_difficulty_success_chance
				FAILURE_CHANCE = difficult_spell_difficulty_failure_chance
				BACKFIRE_EFFECT = domination_backfire_effect
			}
		}
	}
}

strengthening = {
	scope = character
	effect = {
		increase_progress_to_living_magi_trait = yes
		personal_beneficial_spell_apply_personality_effects = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 2 SUCCESS_CHANCE = standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = strengthening_effect FAILURE_CHANCE = standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = thinning_effect }
	}
}

fire_magick = {
	scope = character

	effect = {
		increase_progress_to_living_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 1 SUCCESS_CHANCE = standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = fire_magick_effect FAILURE_CHANCE = standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = fire_magick_backfire_effect }
	}
}

unveiling = {
   scope = character

    effect = {
		increase_progress_to_living_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 2 SUCCESS_CHANCE = standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = unveiling_effect FAILURE_CHANCE = standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = unveiling_backfire_effect }
	}
}

creation = {
	scope = character

	effect = {
		increase_progress_to_living_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 1 SUCCESS_CHANCE = standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = creation_effect FAILURE_CHANCE = standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = creation_backfire_effect }
	}
}

plant_growth = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			increase_progress_to_living_magi_trait = yes
			apply_spell_effect_with_custom_backfire_chance_list_land = { TIER = 1 SUCCESS_CHANCE = standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = plant_growth_effect FAILURE_CHANCE = standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = plant_growth_backfire_effect }
		}
	}
}

divination = {
	scope = character

	effect = {
		increase_progress_to_living_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 3 SUCCESS_CHANCE = difficult_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = divination_effect FAILURE_CHANCE = difficult_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = unveiling_backfire_effect }
	}
}

raise_undead = {
	scope = character

	effect = {
		increase_progress_to_living_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 3 SUCCESS_CHANCE = difficult_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = raise_undead_effect FAILURE_CHANCE = difficult_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = fire_magick_backfire_effect }
	}
}

genocide_region = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			every_in_list = {
				variable = spell_l_targets
				save_scope_as = location
				scope:location = {
					add_county_modifier = {
						modifier = genocide_region_mod
						years = 5
					}
				set_county_culture = root.culture
				set_county_faith = root.faith
				}
				root = {
					deduct_spell_cost_by_tier = { TIER = 5 }
				}
			}
		}
		else = {
			if = {
				limit = { exists = capital_province }
				capital_province = { save_scope_as = location }
			}
		}

			send_interface_toast = {
				title = purge_region_toast
			}
		}
}

annihilation = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			increase_progress_to_living_magi_trait = yes
			county_harmful_spell_apply_personality_effects = yes
			apply_spell_effect_with_custom_backfire_chance_list_land = { TIER = 5 SUCCESS_CHANCE = standard_spell_difficulty_success_chance SPELL_EFFECT = annihilation_effect FAILURE_CHANCE = difficult_spell_difficulty_failure_chance BACKFIRE_EFFECT = fire_magick_backfire_effect }
		}
	}

}

quicken = {
	scope = character

	effect = {
		increase_progress_to_living_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 1 SUCCESS_CHANCE = standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = quicken_effect FAILURE_CHANCE = standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = poison_effect }
	}
}

magic_cannibalism = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
					any_in_list = {
						variable = spell_targets
						is_imprisoned_by = root
					}
				}
			}
			increase_progress_to_living_magi_trait = yes
			apply_spell_effect_with_custom_backfire_chance_list_self_only = {
				TIER = 3
				SPELL_EFFECT = magic_cannibalism_effect
				SUCCESS_CHANCE = difficult_spell_difficulty_success_chance_nonhostile
				FAILURE_CHANCE = difficult_spell_difficulty_failure_chance_nonhostile
				BACKFIRE_EFFECT = unveiling_backfire_effect
			}
		}
	}
}

battle_rage = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			every_in_list = {
				variable = spell_targets
				add_character_modifier = {
					modifier = battle_rage_mod
					months = 5
				}
			}
			root = {
				deduct_spell_cost_by_tier = { TIER = 3 }
				add_character_flag = {
					flag = casted_battle_rage
					years = 10
				}
				send_interface_toast = {
					title = battle_rage_toast
				}
			}
		}
		else = {
			deduct_spell_cost_by_tier = { TIER = 3 }
			add_character_flag = {
				flag = casted_battle_rage
				years = 10
			}
			add_character_modifier = {
				modifier = battle_rage_mod
				years = 5
			}
				send_interface_toast = {
					title = battle_rage_toast
				}
		}
	}
}

### DEAD MAGIC ###

raise_undead2 = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 3dead SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = raise_undead2_effect FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = fire_magick_backfire_effect }
	}
}

lead_to_gold = {
	scope = character
	
	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list_self_only = { TIER = 2dead SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = lead_to_gold_effect FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = poison_effect }
	}
}

create_golems = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 4dead SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = create_golems_effect FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = earth_magic_backfire_effect }
	}
}

stone_serpent = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 1dead SUCCESS_CHANCE = moon_standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = stone_serpent_effect FAILURE_CHANCE = moon_standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = earth_magic_backfire_effect }
	}
}

necrotic_boon = {
	scope = character

	effect = {
		if = {
			limit = {
				has_variable_list = spell_targets
			}
			every_in_list = {
				variable = spell_targets
				random_list = {
					50 = {
						add_martial_skill = 1
					}
					50 = {
						add_learning_skill = 1
					}
				}
			}
			root = {
				add_dread = minor_dread_gain
				deduct_spell_cost_by_tier = { TIER = 2 }
				add_character_flag = {
					flag = casted_necrotic_boon
					years = 10
				}
			}
		}
		else = {
			add_dread = minor_dread_gain
			deduct_spell_cost_by_tier = { TIER = 2 }
			add_character_flag = {
				flag = casted_necrotic_boon
				years = 10
			}
			random_list = {
				50 = {
					add_martial_skill = 1
				}

				50 = {
					add_learning_skill = 1
				}
			}
		}
		send_interface_toast = {
			title = necrotic_boon_toast
		}
	}
}

pull_meteor = {
	scope = character
	
	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			increase_overwhelmation_from_moon_pull = yes
			increase_progress_to_dead_magi_trait = yes
			county_harmful_spell_apply_personality_effects = yes
			apply_spell_effect_with_backfire_chance_list_land = { TIER = 4dead SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance SPELL_EFFECT = pull_meteor_effect FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance }
		}
	}
}

earthquake = {
	scope = character
	
	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			increase_overwhelmation_from_moon_pull = yes
			increase_progress_to_dead_magi_trait = yes
			county_harmful_spell_apply_personality_effects = yes
			apply_spell_effect_with_backfire_chance_list_land = { TIER = 5dead SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance SPELL_EFFECT = earthquake_effect FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance }
		}
	}
}

crush_armor = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			increase_overwhelmation_from_moon_pull = yes
			increase_progress_to_dead_magi_trait = yes
			send_interface_toast = { title = crush_armor_toast }
			personal_harmful_spell_apply_personality_effects = yes
			apply_spell_effect_with_backfire_chance_list = { TIER = 2dead SUCCESS_CHANCE = moon_standard_spell_difficulty_success_chance SPELL_EFFECT = crush_armor_effect FAILURE_CHANCE = moon_standard_spell_difficulty_failure_chance }

		}
	}
}

enchant_arms = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 1dead SUCCESS_CHANCE = moon_standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = enchant_arms_effect FAILURE_CHANCE = moon_standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = crush_armor_effect }
	}
}

moon_read = {
    scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 2dead SUCCESS_CHANCE = moon_standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = moon_read_effect FAILURE_CHANCE = moon_standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = moon_read_backfire_effect }
	}
}

craft_greater_golem = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 3dead SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = craft_greater_golem_effect FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = earth_magic_backfire_effect }
	}
}

necrotic_vitality = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list_self_only = { TIER = 4dead SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = necrotic_vitality_effect FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = necrotic_vitality_backfire_effect }
	}
}

boneshaping = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 3dead SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = boneshaping_effect FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = thinning_effect }
	}
}

petrify = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			increase_overwhelmation_from_moon_pull = yes
			increase_progress_to_dead_magi_trait = yes
			apply_spell_effect_with_backfire_chance_list = { TIER = 2dead SUCCESS_CHANCE = moon_standard_spell_difficulty_success_chance SPELL_EFFECT = petrify_effect FAILURE_CHANCE = moon_standard_spell_difficulty_failure_chance }

		}
	}
}

find_minerals = {
	scope = character
	
	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			increase_overwhelmation_from_moon_pull = yes
			increase_progress_to_dead_magi_trait = yes
			apply_spell_effect_with_custom_backfire_chance_list_land = { TIER = 3dead SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = find_minerals_effect FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = earth_magic_backfire_effect }
		}
	}
}

improve_soil = {
	scope = character
	
	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			increase_overwhelmation_from_moon_pull = yes
			increase_progress_to_dead_magi_trait = yes
			apply_spell_effect_with_custom_backfire_chance_list_land = { TIER = 2dead SUCCESS_CHANCE = moon_standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = improve_soil_effect FAILURE_CHANCE = moon_standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = earth_magic_backfire_effect }
		}
	}
}

earth_fort = {
	scope = character
	
	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			increase_overwhelmation_from_moon_pull = yes
			increase_progress_to_dead_magi_trait = yes
			apply_spell_effect_with_custom_backfire_chance_list_land = { TIER = 1dead SUCCESS_CHANCE = moon_standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = earth_fort_effect FAILURE_CHANCE = moon_standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = earth_magic_backfire_effect }
		}
	}
}

raise_earth = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = {
			TIER = 1dead
			SPELL_EFFECT = raise_earth_effect
			SUCCESS_CHANCE = moon_standard_spell_difficulty_success_chance_nonhostile
			FAILURE_CHANCE = moon_standard_spell_difficulty_failure_chance_nonhostile
			BACKFIRE_EFFECT = earth_magic_backfire_effect
		}
	}
}

moon_guidance = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list_self_only = {
			TIER = 1dead
			SPELL_EFFECT = moon_guidance_effect
			SUCCESS_CHANCE = moon_difficult_spell_difficulty_success_chance_nonhostile
			FAILURE_CHANCE = moon_difficult_spell_difficulty_failure_chance_nonhostile
			BACKFIRE_EFFECT = moon_guidance_backfire_effect
		}
	}
}

stoneskin = {
	scope = character

	effect = {
		increase_overwhelmation_from_moon_pull = yes
		increase_progress_to_dead_magi_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = {
			TIER = 2dead
			SPELL_EFFECT = stoneskin_effect
			SUCCESS_CHANCE = moon_standard_spell_difficulty_success_chance_nonhostile
			FAILURE_CHANCE = moon_standard_spell_difficulty_failure_chance_nonhostile
			BACKFIRE_EFFECT = petrify_effect
		}
	}
}


### MIXED MAGIC ###

riftmark = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			send_interface_toast = { title = riftmark_toast }
			#increase_progress_to_mixed_magi_trait = yes
			personal_harmful_spell_apply_personality_effects = yes
			apply_spell_effect_with_backfire_chance_list = {
				TIER = 2 
				SPELL_EFFECT = riftmark_effect 
				SUCCESS_CHANCE = standard_spell_difficulty_success_chance
				FAILURE_CHANCE = standard_spell_difficulty_failure_chance
			}
		}
	}
}

unraveling = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			send_interface_toast = { title = unraveling_toast }
			#increase_progress_to_mixed_magi_trait = yes
			personal_deadly_spell_apply_personality_effects = yes
			apply_spell_effect_with_backfire_chance_list = {
				TIER = 2 
				SPELL_EFFECT = unraveling_effect 
				SUCCESS_CHANCE = standard_spell_difficulty_success_chance
				FAILURE_CHANCE = standard_spell_difficulty_failure_chance
			}
		}
	}
}

summon_lesser = {
	scope = character
	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			every_in_list = {
				variable = spell_targets
				root = {
					deduct_spell_cost_by_tier = { TIER = 4 }
					add_character_flag = {
						flag = casted_summon_lesser
						years = 10
					}
				}
				custom_tooltip = summon_fogbeast2.tt
				hidden_effect = {
					add_artifact = {ARTIFACT = artifact_mountamiablefogbeast}
				}
			}
			send_interface_toast = {
				title = greater_fogbeast_toast
			}
		}
		else = {
			deduct_spell_cost_by_tier = { TIER = 4 }
			custom_tooltip = summon_fogbeast.tt
			add_character_flag = {
				flag = casted_summon_lesser
				years = 10
			}
			send_interface_toast = {
				title = greater_fogbeast_toast
			}
			hidden_effect = {
				add_artifact = {ARTIFACT = artifact_mountamiablefogbeast}
			}
		}
	}
}

fog_cast = {
	scope = character
	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			every_in_list = {
				variable = spell_l_targets
				root = {
					deduct_spell_cost_by_tier = { TIER = 5 }
					add_character_flag = {
						flag = fog_casted
						years = 10
					}
				}
				add_county_modifier = {
					modifier = fogswept_modifier
					years = 5
				}
			}
			send_interface_toast = {
				title = summon_fog_toast
			}
		}
		else = {
			deduct_spell_cost_by_tier = { TIER = 5 }
			add_character_flag = {
				flag = fog_casted
				years = 10
			}
			send_interface_toast = {
				title = summon_fog_toast
			}
			capital_county = {
				add_county_modifier = {
					modifier = fogswept_modifier
					years = 5
				} 
			}
		}
	}
}

raise_lesser_fogbeasts = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			every_in_list = {
				variable = spell_l_targets
				save_scope_as = location
			}
		}
		else = {
			if = {
				limit = { exists = capital_province }
				capital_province = { save_scope_as = location }
			}
			spawn_army = {
				name = fogbeast_summoned_troops
				men_at_arms = {
					type = fogbeasts
					stacks = 10
				}
				location = scope:location
				inheritable = no
				uses_supply = no
			}
			add_character_flag = {
				flag = casted_raise_lesser_fogbeasts
				years = 10
			}
			send_interface_toast = {
				title = summon_fogbeasts_toast
			}

			deduct_spell_cost_by_tier = { TIER = 4 }
		}
	}
}

obliterate_memory = {
	scope = character
	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			every_in_list = {
				variable = spell_targets
				root = {
					deduct_spell_cost_by_tier = { TIER = 5 }
					add_character_flag = {
						flag = casted_obliterate_memory
						years = 10
					}
				}
			}
			send_interface_toast = {
				title = obliterate_memories_toast
			}
			if = {
				limit ={
					var:magic_lvl = { compare_value = 1 }
				}
				custom_tooltip = obliterate_tooltip1.tt
				hidden_effect = {
					every_in_list = {
						variable = spell_targets
						add_trait = depressed_1
					}
				}
			}
			if = {
				limit ={
					var:magic_lvl = { compare_value = 2 }
				}
					custom_tooltip = obliterate_tooltip2.tt
					every_in_list = {
						variable = spell_targets
						random_list = {
							50 = {
								add_trait = lunatic_1
							}
							50 = {
								add_trait = depressed_1
							}
						}
					}
				}
			}
			if = {
				limit ={
					var:magic_lvl = { compare_value = 3 }
					}
					custom_tooltip = obliterate_tooltip3.tt
					hidden_effect = {
						every_in_list = {
							variable = spell_targets
							random_list = {
								50 = {
									add_trait = incapable
								}
								50 = {
									add_trait = lunatic_1
								}
							}
						}
					}
				}
		else = {
			deduct_spell_cost_by_tier = { TIER = 5 }
			if = {
				limit = {
					var:magic_lvl = { compare_value = 1 }
				}
				custom_tooltip = obliterate_tooltipW.tt
					hidden_effect = {
						add_trait = depressed_1
					}
				}
			if = {
				limit = {
						var:magic_lvl = { compare_value = 2 }
					}
					custom_tooltip = obliterate_tooltipW2.tt
					hidden_effect = {
						add_trait = lunatic_1
					}
				}
			if = {
				limit = {
						var:magic_lvl = { compare_value = 3 }
						}
						custom_tooltip = obliterate_tooltipW3.tt
						hidden_effect = {
							add_trait = incapable
						}
					}
				}
			}
		}


#needs work
rift_walk = {
	scope = character
	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			send_interface_toast = { title = rift_walk_toast }
			apply_spell_effect_with_custom_backfire_chance_list = {
				TIER = 2
				SPELL_EFFECT = rift_walk_effect
				SUCCESS_CHANCE = difficult_spell_difficulty_success_chance_nonhostile
				FAILURE_CHANCE = difficult_spell_difficulty_failure_chance_nonhostile
				BACKFIRE_EFFECT = domination_backfire_effect
			}
		}
	}
}

#
haunting_power = {
	scope = character
	effect = {

		if = {
			limit = {
				root = {
					has_variable_list = spell_targets
				}
			}
			every_in_list = {
				variable = spell_targets
				root = {
					deduct_spell_cost_by_tier = { TIER = 1 }
					add_character_flag = {
						flag = casted_haunting_power
						years = 10
					}
				}
				add_character_modifier = {
					modifier = haunting_power_mod
					years = 5
				}
			}
			send_interface_toast = {
				title = haunting_power_toast
			}
		}
		else = {
			deduct_spell_cost_by_tier = { TIER = 1 }
			add_character_flag = {
				flag = casted_haunting_power
				years = 10
			}
			add_character_modifier = {
				modifier = haunting_power_mod
				years = 5
			}
			send_interface_toast = {
				title = haunting_power_toast
			}
		}
	}
}

# Other magic

kemsar_water_spell = {
	scope = character

	effect = {
		if = {
			limit = {
				root = {
					has_variable_list = spell_l_targets
				}
			}
			increase_progress_to_living_magi_trait = yes
			apply_spell_effect_with_custom_backfire_chance_list_land = { TIER = 2 SUCCESS_CHANCE = standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = kemsar_water_spell_effect FAILURE_CHANCE = standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = kemsar_water_spell_effect }
		}
	}
}
glimpse_reality = {
	scope = character
	
	effect = {
		increase_progress_to_living_mixed_trait = yes
		apply_spell_effect_with_custom_backfire_chance_list = { TIER = 1 SUCCESS_CHANCE = standard_spell_difficulty_success_chance_nonhostile SPELL_EFFECT = glimpse_reality_effect FAILURE_CHANCE = standard_spell_difficulty_failure_chance_nonhostile BACKFIRE_EFFECT = unveiling_backfire_effect }
	}
}