artifacts_gui_close = {
	scope = character
	is_shown = {always = yes}
	effect = {remove_variable = artifacts_gui_toggle}
}
artifacts_save_scope = {
	scope = character
	is_shown = {always = yes}
	effect = {save_scope_as = artifact_person}
}
artifacts_has_no_artifacts = {# Shows text
	scope = character
	is_shown = {NOT = {has_any_artifact = yes}}
}
artifacts_clicked = {# Fires when any artifact is clicked in the window
	scope = character
	is_shown = {}
	effect = {}
}
artifacts_tooltip = { #Not currently hooked up to anything
	is_shown = {always = no}
	effect = {}
}
artifacts_equipped = { #Shows "Equipped" in green when selected artifact is equipped
	scope = character
	is_shown = {
		is_artifact_equipped = {ARTIFACT = Scope:SELECTION}
	}
}
artifacts_destroy_artifact = { #Button which destroys selection
	scope = character
	is_shown = {
		has_variable = artifact_selection
		NOT = {is_selection_indestructible = yes}}
	effect = {
		for_all_artifacts_no_arguments = {APPLY = destroy_artifact_if_selected}
	}
}
artifacts_equip_artifact = {# Triggers when the "Equip" button is clicked
	scope = character
	is_shown = {
		has_variable = artifact_selection
		NOT = {
			is_selection_equipped = yes
		}
	}
	effect = {
		for_all_slots = {APPLY = unequip_selected_type_artifacts}
		for_all_artifacts_no_arguments = {APPLY = equip_selected_artifact}
	}
}
artifacts_unequip_artifact = {# Triggers when the Unequip button is clicked
	scope = character
	is_shown = {
		has_variable = artifact_selection
		is_selection_equipped = yes
	}
	effect = {
		for_all_artifacts_no_arguments = {APPLY = unequip_selected_artifact }
	}
}

artifacts_gift_confirm = {
	scope = character
	is_shown = {
		always = yes
	}
	effect = {
		transfer_selected_gift_artifacts = { FROM = root TO = var:artifact_recipient }
		var:artifact_recipient = {
			add_opinion = {
				target = root
				modifier = gave_artifacts_opinion
			}
		}
	}
}

artifacts_cant_artifact = {
	scope = character
	is_shown = {
		has_variable = artifact_selection
		is_selection_indestructible = yes
	}
}

artifacts_save_character = {
	scope = character
	effect = {
		if = {
			limit = { has_variable = artifact_person }
			remove_variable = artifact_person
			save_scope_as = artifact_person
		}
		else = {
			set_variable = artifact_person
		}
	}
}

artifact_name = {
	effect = {
		for_handheld_artifacts = {  
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_name_effect
			A = temporary
			B = temporary
		}
		for_armor_artifacts = {  
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_name_effect
			A = temporary
			B = temporary
		}
		for_headgear_artifacts = {
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_name_effect
			A = temporary
			B = temporary
		}
		for_jewelry_artifacts = {
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_name_effect
			A = temporary
			B = temporary
		}
		for_mount_artifacts = {
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_name_effect
			A = temporary
			B = temporary
		}
		for_book_artifacts = {
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_name_effect
			A = temporary
			B = temporary
		}
	}
}

artifact_desc = {
	effect = {
		for_handheld_artifacts = {  
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_desc_effect
			A = temporary
			B = temporary
		}
		for_armor_artifacts = {  
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_desc_effect
			A = temporary
			B = temporary
		}
		for_headgear_artifacts = {
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_desc_effect
			A = temporary
			B = temporary
		}
		for_jewelry_artifacts = {
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_desc_effect
			A = temporary
			B = temporary
		}
		for_mount_artifacts = {
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_desc_effect
			A = temporary
			B = temporary
		}
		for_book_artifacts = {
			PREFIX = ""
			SUFFIX = ""
			APPLY = artifact_desc_effect
			A = temporary
			B = temporary
		}
	}
}

select_artifact_scripted_gui = {
	is_shown = {
	
	}
	
	effect = {
		if = {
			limit = { exists = scope:selected_artifact_scope } 
			debug_log = "EXECUTING GUI"
			for_all_artifacts_no_arguments = { APPLY = select_artifact }
		}
	}
}