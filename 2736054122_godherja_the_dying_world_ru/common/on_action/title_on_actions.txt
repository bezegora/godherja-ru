#On actions about titles

# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

# A title is destroyed
# root = the holder before destruction
# scope:landed_title = the title that is being destroyed
# Does *not* provide scope:transfer_type
on_title_destroyed = {
	events = {
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	events = {
		gh_realm_maintenance.0001	# Destroy or demote landed holy orders
		gh_realm_maintenance.0011	# Destroy rival Mamuramats
	}
	effect = {
		if = {
			limit = {
				scope:title = { is_holy_order = yes }
				NOT = { has_trait = order_member }
				has_government = holy_order_government
			}
			add_trait = order_member
		}
		# The below removes cliques from titles that are gained by characters who should not have them.
		# If the title is conquered from a character who should still have cliques afterwards, the cliques are transferred to the
		# previous holder's primary title. Else, the cliques are completely removed from both the title and the game.
		if = {
			limit = {
				scope:title = {
					has_variable = clique_number
				}
				OR = {
					should_have_own_cliques_trigger = no
					AND = {
						has_variable = clique_title
						NOT = { var:clique_title = scope:title }
						#NOT = { var:clique_title.tier < scope:title.tier } not sure this should be a thing or not, depends on other stuff
						this = var:clique_title.holder
					}
				}
			}
			scope:title = {
				save_scope_as = title_to_have_cliques_removed
				if = {
					limit = {
					scope:previous_holder = {
						should_have_own_cliques_trigger = yes
						}
					}
					scope:previous_holder.primary_title = {
						save_scope_as = title_to_have_cliques_added
					}
					copy_clique_information_effect = { SOURCE = scope:title_to_have_cliques_removed TARGET = scope:title_to_have_cliques_added }
					# the part below doesn't seem to work completely - use debug to check later
					scope:title_to_have_cliques_added = {
						every_in_list = {
							variable = title_cliques
							every_in_list = {
								variable = clique_members
								if = {
									limit = { 
										NOT = { 
											OR = {
												any_liege_or_above = { this = scope:previous_holder }
												this = scope:previous_holder
												}
											} 
										}
									remove_from_any_clique_effect = yes
								}
							}
						}
					}
				}
				else = {
					scope:title_to_have_cliques_removed = {
						remove_and_destroy_cliques_in_title_effect = yes
					}
				}
			}
		}
			

		#Did I receive a title from my sibling?
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					is_alive = yes
					exists = var:sibling_waiting_for_land
					any_sibling = {
						this = root
						this = scope:previous_holder.var:sibling_waiting_for_land
					}
				}
			}
			add_character_flag = {
				flag = got_title_from_sibling
				years = 4
			}
		}
		
		if = {	# Griffon event for Chevalie
			limit = { 
				scope:title = title:e_chevalie
			}
			trigger_event = {
				id = marcher.0110
				days = 5
			}
		}
		
		if = {
			limit = {
				has_government = pirate_government
			}
			update_pirate_commerce_raiding_list = yes
			trade_strait_table_effect = { MODE = update}
		}
	}
}

# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
on_title_gain_inheritance = {
	events = {
		ahridar.0011
	}
	effect = {
		trigger_event = {
			id = gh_pirate.0002
			days = 1
		}
		if = {
			limit = {
				scope:previous_holder = character:western_imperial_1
				NOT = {
					scope:previous_holder = {
						any_child = {
							exists = this
						}
					}
				}
			}
			destroy_title = title:e_oraispol_aautokratia
		}
		if = {
			limit = {
				any_held_title = {
					has_variable_list = contesting_linked_titles
				}
			}
			random_held_title = {
				limit = { has_variable_list = contesting_linked_titles }
				save_scope_as = main_contested_title
				if = {
					limit = { any_in_de_facto_hierarchy = { this = scope:title } }
					add_to_variable_list = {
						name = linked_titles
						target = scope:title
					}
				}
			}
			add_character_flag = temporary_holder
		}
		if = {
			limit = {
				has_global_variable = amsari_civil_war
				scope:title = scope:previous_holder.primary_title
				current_date <= 1304.1.1  #after 50 years the heirs no longer can get involved with the war, it invalidates
				scope:previous_holder = {
					has_variable = amsari_war1
				}
			}
			set_variable = {
				name = amsari_war1
				value = this
			}
			trigger_event = {
				id = amsari.0007
				days = 1
			}
			add_to_global_variable_list = { ##variable added so the decision can count how many are left
				name = amsari_war
				target = this
			}
		}
		else_if = {
			#if your title has the sjalvolki_succession_law, check if you are undergoing the event
			limit = {
				has_realm_law = sjalvolki_succession_law
				is_independent_ruler = yes
				scope:title = {
					tier >= tier_kingdom
					NOT = {
						this = title:e_rite_authority_rel
					}
				}
			}
			primary_title = {
				set_variable = {
					name = previous_holder
					value = scope:previous_holder
				}
			}
			#if you aren't going through the event chain, start the event chain
			if = {
				limit = {
					NOT = {
						has_character_flag = temporary_holder
					}
				}
				add_character_flag = temporary_holder
				trigger_event = {
					id = sjalvolki_succession.0001
					days = 1
				}
			}
		}
		else_if = { # Aversarian Succession
			limit = {
				scope:title = {
					has_title_law = aversarian_succession_law
				}
			}
			primary_title = {
				set_variable = {
					name = previous_holder
					value = scope:previous_holder
				}
			}
			#if any previous_holders titles are currently in contention, don't continue	
			if = {
				limit = {
					any_held_title = {
						has_variable_list = contesting_linked_titles
					}
				}
				add_character_flag = temporary_holder
			}
			if = {
				limit = {
					NOT = {
						has_character_flag = temporary_holder
					}
				}
				add_character_flag = temporary_holder
				trigger_event = {
					id = aversarian_succession.0001
					days = 1
				}
			}
		}
		else_if = { # Coronation System On Action Below
			limit = {
				AND = {
					faith = {
						has_doctrine_parameter = can_perform_coronations
					}
					NOT = { faith.religious_head = THIS }
					NOT = { has_character_flag = temporary_holder }
					is_adult = yes
					highest_held_title_tier > 2 # Dukes and above
					
					NOT = {
						has_trait = coronated_by_head_of_religion
						has_trait = coronated_by_high_priest
						has_trait = coronated_by_bishop
						has_trait = coronated_formal_3
						has_trait = coronated_formal_2
						has_trait = coronated_formal_1
						has_trait = coronated_celebration
					}
				}
			}
			trigger_event = {
				id = coronation.0001
				days = 3
			}
		}
		else_if = {
			limit = {
				AND = {
					faith = {
						has_doctrine_parameter = can_perform_coronations
					}
					NOT = { faith.religious_head = THIS }
					is_adult = no
				}
			}
			add_dread = 50
		}
		# Coronation System On Action Above
	}
}

# A title is usurped by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Shouldn't be dead
on_title_gain_usurpation = {
	events = {
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	effect = {
		#Earmark landless Sjalvolki/Marchers for adventuring.
		if = {
			limit = {
				#Must have lost their last piece of land.
				is_landed = no
				#If they've ventured far outside clanlands/marcher kingdoms, they're unlikely to come back, so we don't want them.
				scope:title = {
					tier = tier_county
					title_province = {
						OR = {
							geographical_region = world_sarradon
							geographical_region = world_ga_aironoi
							geographical_region = world_ga_mayikprolollan
							geographical_region = world_ga_lichdoms
							geographical_region = world_ga_foglands
						}
					}
				}
			}
			#Sjalvolki go into this adventurer list. (was western)
			if = {
				limit = {
					has_culture_group = culture_group:gh_sjalvolki_group
				}
				add_to_global_variable_list = {
					name = sjalvolki_adventurer_list
					target = this
				}
			}
			#Marcher go into this list. (was eastern)
			if = {
				limit = {
					has_culture_group = culture_group:gh_marcher_group
				}
				add_to_global_variable_list = {
					name = marcher_adventurer_list
					target = this
				}
			}
			if = {
				limit = {
					has_government = pirate_government
				}
				add_to_global_variable_list = {
					name = pirate_adventurer_list
					target = this
				}
			}
		}

		#Apply loss of stress to the Rivals
		if = {
			limit = {
				scope:title.tier >= tier_county
				OR = {
					scope:transfer_type = flag:conquest
					scope:transfer_type = flag:conquest_holy_war
					scope:transfer_type = flag:conquest_claim
					scope:transfer_type = flag:conquest_populist
					scope:transfer_type = flag:abdication
					scope:transfer_type = flag:usurped
					scope:transfer_type = flag:revoked
					scope:transfer_type = flag:faction_demand
				}
			}
			root = {
				save_scope_as = actor
			}
			every_relation ={
				type = rival

				send_interface_message = {
					type = event_generic_neutral
					title = msg_rival_dethroned
					left_icon = scope:actor
					right_icon = scope:title

					custom_tooltip = msg_rival_dethroned_desc

					stress_impact = { 
						base = medium_stress_loss
						vengeful = medium_stress_loss
					}
				}
			}
		}
		
		if = {
			limit = { 
				has_variable = character_clique
				can_access_cliques_trigger = no
			}
			remove_from_any_clique_effect = yes
		}
		if = {
			limit = {
				has_government = pirate_government
			}
			update_pirate_commerce_raiding_list = yes
			trade_strait_table_effect = { MODE = update}
		}
	}
}

# A claim is gained by a character
# root = the claimant
# scope:title = the title that is claimed
on_explicit_claim_gain = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A claim is lost by a character
# root = the claimant
# scope:title = the title that was claimed
on_explicit_claim_lost = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A title change makes the character rank up in the landed tiers (eg Duke -> King)
# root = character ranking up
# scope:title = old primary title
on_rank_up = { # Will not fire during history execution or for dying characters
	events = {
		clique.0002				# Does clique related maintenance
	}
	effect = {
		add_achievement_flag_effect = { FLAG = achievement_moving_up_in_the_world_flag }
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
		# Make a note of ranking up for stele purposes.
		if = {
			limit = {
				# DLC check.
				has_fp1_dlc_trigger = yes
				# Is the culture eligible?
				fp1_can_raise_stele_trigger = yes
				# Aaaaand, for balance reasons, were they landed already?
				exists = scope:title
			}
			set_variable = {
				name = recent_rank_increase
				value = root.primary_title
				years = 5
			}
		}
		if = {
			limit = {
				has_government = republic_government
				scope:transfer_type = flag:granted
				highest_held_title_tier >= tier_county
			}
			change_government = republic_playable_government
			assign_cliques_to_primary_title_if_necessary = yes
		}
	}
}

# A title change makes the character rank down in the landed tiers (eg King -> Duke)
# root = character ranking down
# scope:title = old primary title
on_rank_down = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		add_character_flag = {
			flag = make_suicide_available
			years = 5
		}
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained = {
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
}

# A baron is found or created for a title, E.G., due to the player using the "Give to Low Noble" action
# No transfer type here; it's always a grant
# root = the baron
# scope:liege = the person who wanted them created
# scope:title = the barony
on_baron_found_or_created_for_title = {
	effect = {
		add_opinion = {
			target = scope:liege
			modifier = received_title_barony
		}
	}
}
