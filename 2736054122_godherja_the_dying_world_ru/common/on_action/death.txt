# character just about to die in root scope
# if a killer is know, it's set as scope:killer
#Triggered by code

on_death = {
	on_actions = {
        on_artifact_inheritance
	}
	
	effect = {
		play_music_cue = "mx_cue_death"

		add_character_flag = { flag = about_to_die_but_not_dead_yet_flag } # Used in perk calc

		if = {
			limit = {
				has_character_flag = holdover_in_old_lands
				current_date <= 1300.1.1
			}
			every_child = {
				add_character_flag = holdover_in_old_lands
			}
		}
		if = {
			limit = {
				has_character_flag = aversarian_migration
				current_date <= 1300.1.1
			}
			every_child = {
				add_character_flag = aversarian_migration
			}
		}
		if = {
			limit = {
				has_variable = sjalvolki_vanguard
				current_date <= 1300.1.1
			}
			every_child = {
				add_character_flag = sjalvolki_vanguard
			}
		}
		if = {
			limit = {
				this = character:clanlands_sjalvolki_1
			}
			force_end_the_conquest = yes
			title:c_northern_katraddia_43.holder = {
				trigger_event = {
					id = sjalvolki_reformation.0001
					years = { 7 12 }
				}
			}
			if = {
				limit = {
					has_character_flag = lost_to_cois_once
					NOT = { has_character_flag = lost_to_cois_twice }
					character:cois_1 = { is_alive = yes }
				}
				character:cois_1 = {
					trigger_event = cois.0400
				}
			}
		}
		else_if = {
			limit = {
				this = character:aversaria_isles_1
			}
			father = {
				trigger_event = {
					id = mad_dog.1
					days = 7
				}
			}
		}
		else_if = {
			limit = {
				this = character:marcher_4
			}
			destroy_title = title:d_the_band_of_bastards
		}
		else_if = {
			limit = {
				this = character:southern_imperial_15  
			}
			primary_heir = {
				trigger_event = {
					id = aversaria.9000
					years = 10
				}
			}
		}
		else_if = { #fogland heir
			limit = {
				has_character_flag = is_scathach_arawn  
			}
			save_scope_as = old_khan
			primary_heir = {
				trigger_event = {
					id = fogeater_invasion.0100
					days = 1
				}
				save_scope_as = new_khan
				add_character_modifier = { modifier = fogeater_invasion_leader_modifier }
			}
			every_player = {
				trigger_event = {
					id = fogeater_invasion.1001
					days = 5
				}
			}
		}		
		else_if = { # Tetradia, governor under Legan Hecaeda
			limit = {
				this = character:aironoi_57
				NOT = {
					has_character_flag = btfo_by_legan
					character:aironoi_79 = {
						has_character_flag = sided_with_governor
					}
				}
			}
			destroy_title = title:d_kyvernis_ti_aironoi
			character:aironoi_79 = {
				IF = {
					limit = {
						has_character_flag = sided_with_mongols
					}
					trigger_event = eastern_reforms.0101
				}
				ELSE = {
					trigger_event = eastern_reforms.0100
				}
			}
		}
		else_if = {
			limit = {
				has_character_flag = adabyss_invader
				NOT = {
					has_character_flag = lost_to_sentinelese
				}
			}
			destroy_title = title:e_limpegail
			trigger_event = adabyss_event.0004
		}		
			
		if = {
			limit = { 
				this = character:western_imperial_1
				exists = scope:killer
			}
			scope:killer = {
				add_character_flag = killed_aeschraes
			}
		}
		if = {
			limit = {
				chevalie_will_shatter = yes
			}
			save_scope_as = previous_chevalie_ruler
			primary_heir = {
				trigger_event = {
					id = marcher_political.0001 
					days = 1
				}
			}
		}
		if = { 
			limit = { this = character:canian_1 }
			every_vassal = {
				limit = { 
					any_held_title = {
						tier > tier_barony
					}
					NOT = {
						is_child_of = character:canian_1 
					} 
				}
				trigger_event = {
					id = amsari.0005
					days = 2
				}	
			}			
			every_child = { 
				limit = {
					OR = {
						is_player_selected = yes
						is_landed = yes
					}
				}
				trigger_event = {
					id = amsari.0002
					days = 2
				}
			}
			every_player = { 
				limit = { 
					NOT = { 
						top_liege = character:canian_1
					}
				}
				trigger_event = {
					id = amsari.0011
					days = 2
				}
			}
	  	}
		if = {
			limit = {
				has_variable = amsari_war1
			}
			remove_list_global_variable = { name = amsari_war target = this }
		}
		if = {
			limit = {
				is_ai = no
				exists = player_heir
			}
			player_heir = {
				add_character_flag = {
					flag = tutorial_reactive_advice_succession
				}
			}
		}
		if = {
			limit = {
				trigger_if = {
					limit = { is_landed = yes }
					has_realm_law = sjalvolki_succession_law
					is_independent_ruler = yes
					primary_title = { tier >= tier_kingdom }
				}
				trigger_else = {
					always = no
				}
			}
			primary_title = { save_scope_as = primary_scope }
			setup_succession_titles = yes
		}
		if = {
			limit = {
				has_government = pirate_government
				exists = primary_heir
			}
			shadow_port_succession = yes
		}
		else_if = {#This is here to prevent floating shadow ports
			limit = {
				has_government = pirate_government
			}
			remove_all_shadow_ports = yes
		}
		if = {
			limit = {
				should_have_liege_clique_appointment_succession = yes
			}
			trigger_event = clique.0004	
		}
		if = {
			limit = {
				has_government = magocratic_government
				highest_held_title_tier > tier_barony
			}
			trigger_event = magocracy.0001	
		}
		
		if = {
			limit = {
				has_variable = character_legal_tradition
				has_variable = character_legal_tradition_patronage_level
				var:character_legal_tradition_patronage_level > 0
			}
			save_temporary_scope_as = character_to_remove_from_list
			var:character_legal_tradition = {
				remove_list_variable = { name = legal_tradition_patrons target = scope:character_to_remove_from_list }
			}
		}
		
		if = {
			limit = {
				has_variable = high_court_seat
			}
			var:high_court_seat = {
				remove_variable = seat_occupant
			}
			var:high_court_seat.var:high_court = { save_scope_as = high_court_scope }
			save_scope_as = dead_high_judge
			if = {
				limit = {  
					exists = var:high_court_seat.var:high_court.var:high_court_mamuramat
					exists = var:high_court_seat.var:high_court.var:high_court_mamuramat.holder
				}
				var:high_court_seat.var:high_court.var:high_court_mamuramat.holder = { trigger_event = legal_tradition.1001 }
			}
			else = {
				var:high_court_seat.var:high_court = { fill_high_court_seat_effect = yes }
			}
		}
		invalidate_claimant_factions_on_death_effect = yes
	}
	events = {
		clique.0001				# Does clique related maintenance
		amsari.0001
		gh_widow.1 #Survivng spouse potentially gets widowed
		gh_widow.199 #Lover potentially gets widowed
		death_management.0096	# Updates marriage opinions of other spouses if relevant.
		death_management.0097	# Sets a flag if the dead one was someone you loved (to make suicide available)
		death_management.0098 	# Removes rejected_from_marriage_bed_modifier if spouse dies
		death_management.0099 	# If spouse is pregnant, save as variable
		death_management.0001 	# Finds characters which would care about death for notifications etc.
		intrigue_dread.4012		# Interrupts this event chain for the imprisoner when their prisoner dies.
		stewardship_duty.1065 	# Removes the patron buff from their employer when this character dies.
		stewardship_duty.1067 	# When you die removes your clients fron your court.
		great_holy_war.0024		# Replace recipient for ongoing GHW.
		great_holy_war.0028 	# Beneficiary died, reset and replace.
		great_holy_war.0080 	# ghw_sponsor died, replace.
		great_holy_war.0083		# ghw fallback beneficiary dies.
		religious_decision.0301 # ancestor died and needs to be buried.
		religious_decision.0311 # Dynasty member has died and you can raise a runestone
		game_rule.2				# Exclave Independence
		martial_authority.2057	# Right-Hand Person Dies 
		martial_authority.2055  # Right-handed Person (person with right-hand) Died
		fp1_yearly.0052			# FP1: Rumoured Draugr
		fp1_yearly.1061			# FP1: Ship Burial
		fp1_other_decisions.0062	# FP1: someone intending to HumSac you has died
		fp1_other_decisions.0063	# FP1: designated HumSac has died
		fp1_other_decisions.0064	# FP1: remove counties offended by HumSac modifier
	}
}

# Root = character
# Triggered when someone is about to die from a natural death but is given a second chance by meeting
# the has_natural_death_second_chance scripted rule
on_natural_death_second_chance = {
	effect = {
		if = {
			limit = {
				has_trait = gh_extended_life
				has_variable = vampiric_drain_health_pool
				var:vampiric_drain_health_pool > 0
				NOT = { has_character_modifier = vampirism_death_near }
			}
			vampiric_drain_keep_alive_effect = yes
		}
		else = {
			add_character_flag = {
				flag = know_thyself_perk_delay_period
				days = 390
			}
			add_character_flag = know_thyself_has_triggered_delay
			trigger_event = death_management.9998
			trigger_event = {
				id = death_management.9999
				days = { 340 380 }
			}
		}
	}
}
