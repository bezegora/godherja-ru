@crown_authority_cooldown_years = 20
@pirate_authority_cooldown_years = 10

pirate_authority = {
	default = pirate_authority_1
	cumulative = no
	flag = realm_law
	
	pirate_authority_0 = {
		modifier = {
			vassal_levy_contribution_mult = -0.5
			vassal_tax_contribution_mult = -0.5
			domain_limit = -1
			vassal_limit = -10
			diplomatic_range_mult = 0.5
			men_at_arms_maintenance = -0.5
			tyranny_gain_mult = -0.25
		}
		flag = allows_relocation
		
		can_keep = { realm_law_use_pirate_authority = yes }
	}
	
	pirate_authority_1 = {
		modifier = {
			vassal_levy_contribution_mult = -0.25
			vassal_tax_contribution_mult = -0.25
			domain_limit = -1
			diplomatic_range_mult = 0.25
			men_at_arms_maintenance = -0.25
			direct_vassal_opinion = -10
		}
		flag = allows_relocation

		can_keep = { realm_law_use_pirate_authority = yes }

		can_pass = {
			trigger_if = {
				limit = { has_realm_law = pirate_authority_0 }
				custom_description = {
					subject = root
					text = "has_pirate_authority_cooldown"
					NAND = {
						has_variable = pirate_authority_cooldown
						NOT = {
							culture = { has_innovation = innovation_all_things }
						}
					}
				}
			}
		}
		
		pass_cost = {
			prestige = {
				if = {
					limit = {
						NOR = {
							has_realm_law = pirate_authority_2
							has_realm_law = pirate_authority_3
						}
					}
					add = increase_tribal_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			# Increment cooldown breaker tally, if appropriate.
			calculate_authority_cooldown_break_effect = yes
			# Set regular cooldown.
			set_variable = {
				name = pirate_authority_cooldown
				years = @pirate_authority_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = pirate_authority_0 }
				value = 1
			}
		}
	}
	
	pirate_authority_2 = {
		modifier = {
			vassal_levy_contribution_mult = -0.1
			vassal_tax_contribution_mult = -0.1
			direct_vassal_opinion = -20
			domain_limit = -1
			vassal_limit = -10
		}
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		
		can_keep = { realm_law_use_pirate_authority = yes }
		
		can_pass = {
			trigger_if = {
				limit = {
					NOT = { has_realm_law = pirate_authority_3 }
				}
				has_realm_law = pirate_authority_1
				custom_description = {
					subject = root
					text = "has_pirate_authority_cooldown"
					NAND = {
						has_variable = pirate_authority_cooldown
						NOT = {
							culture = { has_innovation = innovation_all_things }
						}
					}
				}
			}
		}

		pass_cost = {
			prestige = {
				if = {
					limit = {
						NOT = { has_realm_law = pirate_authority_3 }
					}
					add = increase_tribal_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			# Increment cooldown breaker tally, if appropriate.
			calculate_authority_cooldown_break_effect = yes
			# Set regular cooldown.
			set_variable = {
				name = pirate_authority_cooldown
				years = @pirate_authority_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = pirate_authority_1 }
				value = 1
			}
		}
	}
	
	pirate_authority_3 = {
		modifier = {
			direct_vassal_opinion = -30
			domain_limit = -1
			vassal_limit = -5
		}
		flag = can_change_succession_laws
		
		can_keep = { realm_law_use_pirate_authority = yes }
		
		can_pass = {
			has_realm_law = pirate_authority_2
			custom_description = {
				subject = root
				text = "has_pirate_authority_cooldown"
				NOT = {
					has_variable = pirate_authority_cooldown
				}
			}
		}
		
		pass_cost = { prestige = increase_tribal_authority_prestige_cost }
		
		on_pass = {
			# Increment cooldown breaker tally, if appropriate.
			calculate_authority_cooldown_break_effect = yes
			# Set regular cooldown.
			set_variable = {
				name = pirate_authority_cooldown
				years = @pirate_authority_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = pirate_authority_2 }
				value = 1
			}
		}
	}
}
