from typing import Dict, Final, List

import datetime

from parse_defs import JominiDef, read_all_defs_from_files

SCRIPT_HEADER: Final[str] = f"""
##
# THIS FILE WAS GENERATED BY A SCRIPT (see 0tools/charactercopy_effect)
# LAST RUN ON {datetime.date.today().isoformat()}
##
""".strip()

def copy_block_for_trait(trait_key: str) -> str:
    return "if = { limit = { $FROM_CHAR$ = { has_trait = %s } } $TO_CHAR$ = { add_trait = %s } }" % (
        trait_key, trait_key
    )

def copy_effect_for_trait_list(
    effect_name_suffix: str,
    trait_key_list: List[str]
    ) -> str:
    all_copy_blocks: List[str] = [
        '\t'+copy_block_for_trait(trait_key) for trait_key in trait_key_list
    ]

    return (
        'copy_traits_' + effect_name_suffix + ' = {\n' +
            '\n'.join(all_copy_blocks) +
        '\n}\n'
    )
        
trait_defs: Dict[
    str, JominiDef
] = read_all_defs_from_files("../../common/traits")

# skip stuff like the @variable declarations
all_real_trait_keys: List[str] = [
    k for k,v in trait_defs.items() if isinstance(v, dict)]

script_strings: List[str] = [
    SCRIPT_HEADER,
    copy_effect_for_trait_list('all', all_real_trait_keys)
    ]
print('\n'.join(script_strings))